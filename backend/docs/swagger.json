{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Car-Dealer API",
        "title": "Carâ€‘Dealer API",
        "contact": {
            "name": "BD2"
        },
        "license": {
            "name": "MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/users": {
            "get": {
                "description": "Get all users from database and return them as a list of DTOs. If user's subtype is person the company related fields will be ommitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.RetrieveUserDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update user in database from DTO. Currently you can only change basic fields (email, username, password), not the subtype.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "Update form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated",
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates user from DTO and inserts its data to database. Whenever you want to create user you have to specifiy subtype (selector, P or C), fullfil only respective fields, they are required.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "Creation form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input dat(a, propably wrong selector (only \"P\" or \"C\" accepted)",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "description": "Get user by email from database and return it as a DTO. If user's subtype is person the company related fields will be ommitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/user.RetrieveUserDTO"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/id/{id}": {
            "get": {
                "description": "Get user by id from database and return it as a DTO. If user's subtype is person the company related fields will be ommitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/user.RetrieveUserDTO"
                        }
                    },
                    "400": {
                        "description": "Id is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Delete user from database by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User sucessfully deleted"
                    },
                    "400": {
                        "description": "Id is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "custom_errors.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserDTO": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "selector": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.RetrieveUserDTO": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.UpdateUserDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}