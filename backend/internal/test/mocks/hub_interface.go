// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/susek555/BD2/car-dealer-api/internal/models"

	redis "github.com/redis/go-redis/v9"
)

// HubInterface is an autogenerated mock type for the HubInterface type
type HubInterface struct {
	mock.Mock
}

type HubInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *HubInterface) EXPECT() *HubInterface_Expecter {
	return &HubInterface_Expecter{mock: &_m.Mock}
}

// BroadcastLocal provides a mock function with given fields: offerID, data, excludeID
func (_m *HubInterface) BroadcastLocal(offerID string, data []byte, excludeID string) {
	_m.Called(offerID, data, excludeID)
}

// HubInterface_BroadcastLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastLocal'
type HubInterface_BroadcastLocal_Call struct {
	*mock.Call
}

// BroadcastLocal is a helper method to define mock.On call
//   - offerID string
//   - data []byte
//   - excludeID string
func (_e *HubInterface_Expecter) BroadcastLocal(offerID interface{}, data interface{}, excludeID interface{}) *HubInterface_BroadcastLocal_Call {
	return &HubInterface_BroadcastLocal_Call{Call: _e.mock.On("BroadcastLocal", offerID, data, excludeID)}
}

func (_c *HubInterface_BroadcastLocal_Call) Run(run func(offerID string, data []byte, excludeID string)) *HubInterface_BroadcastLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *HubInterface_BroadcastLocal_Call) Return() *HubInterface_BroadcastLocal_Call {
	_c.Call.Return()
	return _c
}

func (_c *HubInterface_BroadcastLocal_Call) RunAndReturn(run func(string, []byte, string)) *HubInterface_BroadcastLocal_Call {
	_c.Run(run)
	return _c
}

// LoadClientToRooms provides a mock function with given fields: userID
func (_m *HubInterface) LoadClientToRooms(userID string) {
	_m.Called(userID)
}

// HubInterface_LoadClientToRooms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadClientToRooms'
type HubInterface_LoadClientToRooms_Call struct {
	*mock.Call
}

// LoadClientToRooms is a helper method to define mock.On call
//   - userID string
func (_e *HubInterface_Expecter) LoadClientToRooms(userID interface{}) *HubInterface_LoadClientToRooms_Call {
	return &HubInterface_LoadClientToRooms_Call{Call: _e.mock.On("LoadClientToRooms", userID)}
}

func (_c *HubInterface_LoadClientToRooms_Call) Run(run func(userID string)) *HubInterface_LoadClientToRooms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HubInterface_LoadClientToRooms_Call) Return() *HubInterface_LoadClientToRooms_Call {
	_c.Call.Return()
	return _c
}

func (_c *HubInterface_LoadClientToRooms_Call) RunAndReturn(run func(string)) *HubInterface_LoadClientToRooms_Call {
	_c.Run(run)
	return _c
}

// RemoveClientFromRoom provides a mock function with given fields: userID, offerID
func (_m *HubInterface) RemoveClientFromRoom(userID string, offerID string) {
	_m.Called(userID, offerID)
}

// HubInterface_RemoveClientFromRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientFromRoom'
type HubInterface_RemoveClientFromRoom_Call struct {
	*mock.Call
}

// RemoveClientFromRoom is a helper method to define mock.On call
//   - userID string
//   - offerID string
func (_e *HubInterface_Expecter) RemoveClientFromRoom(userID interface{}, offerID interface{}) *HubInterface_RemoveClientFromRoom_Call {
	return &HubInterface_RemoveClientFromRoom_Call{Call: _e.mock.On("RemoveClientFromRoom", userID, offerID)}
}

func (_c *HubInterface_RemoveClientFromRoom_Call) Run(run func(userID string, offerID string)) *HubInterface_RemoveClientFromRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *HubInterface_RemoveClientFromRoom_Call) Return() *HubInterface_RemoveClientFromRoom_Call {
	_c.Call.Return()
	return _c
}

func (_c *HubInterface_RemoveClientFromRoom_Call) RunAndReturn(run func(string, string)) *HubInterface_RemoveClientFromRoom_Call {
	_c.Run(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *HubInterface) Run() {
	_m.Called()
}

// HubInterface_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type HubInterface_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *HubInterface_Expecter) Run() *HubInterface_Run_Call {
	return &HubInterface_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *HubInterface_Run_Call) Run(run func()) *HubInterface_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HubInterface_Run_Call) Return() *HubInterface_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *HubInterface_Run_Call) RunAndReturn(run func()) *HubInterface_Run_Call {
	_c.Run(run)
	return _c
}

// SaveNotificationForClients provides a mock function with given fields: offerID, userID, n
func (_m *HubInterface) SaveNotificationForClients(offerID string, userID uint, n *models.Notification) error {
	ret := _m.Called(offerID, userID, n)

	if len(ret) == 0 {
		panic("no return value specified for SaveNotificationForClients")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, *models.Notification) error); ok {
		r0 = rf(offerID, userID, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HubInterface_SaveNotificationForClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNotificationForClients'
type HubInterface_SaveNotificationForClients_Call struct {
	*mock.Call
}

// SaveNotificationForClients is a helper method to define mock.On call
//   - offerID string
//   - userID uint
//   - n *models.Notification
func (_e *HubInterface_Expecter) SaveNotificationForClients(offerID interface{}, userID interface{}, n interface{}) *HubInterface_SaveNotificationForClients_Call {
	return &HubInterface_SaveNotificationForClients_Call{Call: _e.mock.On("SaveNotificationForClients", offerID, userID, n)}
}

func (_c *HubInterface_SaveNotificationForClients_Call) Run(run func(offerID string, userID uint, n *models.Notification)) *HubInterface_SaveNotificationForClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint), args[2].(*models.Notification))
	})
	return _c
}

func (_c *HubInterface_SaveNotificationForClients_Call) Return(_a0 error) *HubInterface_SaveNotificationForClients_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HubInterface_SaveNotificationForClients_Call) RunAndReturn(run func(string, uint, *models.Notification) error) *HubInterface_SaveNotificationForClients_Call {
	_c.Call.Return(run)
	return _c
}

// SendFourLatestNotificationsToClient provides a mock function with given fields: offerID, userID
func (_m *HubInterface) SendFourLatestNotificationsToClient(offerID string, userID string) {
	_m.Called(offerID, userID)
}

// HubInterface_SendFourLatestNotificationsToClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendFourLatestNotificationsToClient'
type HubInterface_SendFourLatestNotificationsToClient_Call struct {
	*mock.Call
}

// SendFourLatestNotificationsToClient is a helper method to define mock.On call
//   - offerID string
//   - userID string
func (_e *HubInterface_Expecter) SendFourLatestNotificationsToClient(offerID interface{}, userID interface{}) *HubInterface_SendFourLatestNotificationsToClient_Call {
	return &HubInterface_SendFourLatestNotificationsToClient_Call{Call: _e.mock.On("SendFourLatestNotificationsToClient", offerID, userID)}
}

func (_c *HubInterface_SendFourLatestNotificationsToClient_Call) Run(run func(offerID string, userID string)) *HubInterface_SendFourLatestNotificationsToClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *HubInterface_SendFourLatestNotificationsToClient_Call) Return() *HubInterface_SendFourLatestNotificationsToClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *HubInterface_SendFourLatestNotificationsToClient_Call) RunAndReturn(run func(string, string)) *HubInterface_SendFourLatestNotificationsToClient_Call {
	_c.Run(run)
	return _c
}

// StartRedisFanIn provides a mock function with given fields: ctx, rdb
func (_m *HubInterface) StartRedisFanIn(ctx context.Context, rdb *redis.Client) {
	_m.Called(ctx, rdb)
}

// HubInterface_StartRedisFanIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartRedisFanIn'
type HubInterface_StartRedisFanIn_Call struct {
	*mock.Call
}

// StartRedisFanIn is a helper method to define mock.On call
//   - ctx context.Context
//   - rdb *redis.Client
func (_e *HubInterface_Expecter) StartRedisFanIn(ctx interface{}, rdb interface{}) *HubInterface_StartRedisFanIn_Call {
	return &HubInterface_StartRedisFanIn_Call{Call: _e.mock.On("StartRedisFanIn", ctx, rdb)}
}

func (_c *HubInterface_StartRedisFanIn_Call) Run(run func(ctx context.Context, rdb *redis.Client)) *HubInterface_StartRedisFanIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.Client))
	})
	return _c
}

func (_c *HubInterface_StartRedisFanIn_Call) Return() *HubInterface_StartRedisFanIn_Call {
	_c.Call.Return()
	return _c
}

func (_c *HubInterface_StartRedisFanIn_Call) RunAndReturn(run func(context.Context, *redis.Client)) *HubInterface_StartRedisFanIn_Call {
	_c.Run(run)
	return _c
}

// SubscribeUser provides a mock function with given fields: uid, offerID
func (_m *HubInterface) SubscribeUser(uid string, offerID string) {
	_m.Called(uid, offerID)
}

// HubInterface_SubscribeUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeUser'
type HubInterface_SubscribeUser_Call struct {
	*mock.Call
}

// SubscribeUser is a helper method to define mock.On call
//   - uid string
//   - offerID string
func (_e *HubInterface_Expecter) SubscribeUser(uid interface{}, offerID interface{}) *HubInterface_SubscribeUser_Call {
	return &HubInterface_SubscribeUser_Call{Call: _e.mock.On("SubscribeUser", uid, offerID)}
}

func (_c *HubInterface_SubscribeUser_Call) Run(run func(uid string, offerID string)) *HubInterface_SubscribeUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *HubInterface_SubscribeUser_Call) Return() *HubInterface_SubscribeUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *HubInterface_SubscribeUser_Call) RunAndReturn(run func(string, string)) *HubInterface_SubscribeUser_Call {
	_c.Run(run)
	return _c
}

// NewHubInterface creates a new instance of HubInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHubInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HubInterface {
	mock := &HubInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
