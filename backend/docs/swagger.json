{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Car-Dealer API",
        "title": "Carâ€‘Dealer API",
        "contact": {
            "name": "BD2"
        },
        "license": {
            "name": "MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return a pair of tokens and user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - returns tokens and data of the user",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh access tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - returns new access token",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Set up account and return the status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - returns tokens",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    },
                    "409": {
                        "description": "Login taken",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    }
                }
            }
        },
        "/car/colors": {
            "get": {
                "description": "Returns a list of all possible colors that are accepted when creating a new offer. If the color of your car is not in the list, choose 'other'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get all possible colors",
                "responses": {
                    "200": {
                        "description": "List of colors",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/car/drives": {
            "get": {
                "description": "Returns a list of all possible drives that are accepted when creating a new offer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get all possible drives",
                "responses": {
                    "200": {
                        "description": "List of drives",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/car/fuel-types": {
            "get": {
                "description": "Returns a list of all possible fuel types that are accepted when creating a new offer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get all possible fuel types",
                "responses": {
                    "200": {
                        "description": "List of fuel types",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/car/manufacturer-model-map": {
            "get": {
                "description": "Get manufacturers and models map. Each manufacturer has a list of models (the indices are corresponding).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get manufacturers and models map",
                "responses": {
                    "200": {
                        "description": "map of manufacturers and models",
                        "schema": {
                            "$ref": "#/definitions/car.ManufacturerModelMap"
                        }
                    },
                    "404": {
                        "description": "manufacturer of model not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/car/manufacturers": {
            "get": {
                "description": "Returns a list of all manufacturers stored in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get all manufacturers",
                "responses": {
                    "200": {
                        "description": "List of manufacturers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/manufacturer.Manufacturer"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/car/models/id/{id}": {
            "get": {
                "description": "Returns a list of all models stored in the database for a given manufacturer id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get all models by manufacturer id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Manufacturer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of models",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RetrieveModelDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Id is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Models not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/car/models/name/{name}": {
            "get": {
                "description": "Returns a list of all models stored in the database for a given manufacturer name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get all models by manufacturer name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturer name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of models",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RetrieveModelDTO"
                            }
                        }
                    },
                    "404": {
                        "description": "Models not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/car/transmissions": {
            "get": {
                "description": "Returns a list of all possible transmissions that are accepted when creating a new offer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Get all possible transmissions",
                "responses": {
                    "200": {
                        "description": "List of transmissions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Logout user and invalidate refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Logout form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LogoutInput"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review": {
            "get": {
                "description": "Returns every review in the system as an array of DTOs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "List all reviews",
                "operationId": "getAllReviews",
                "responses": {
                    "200": {
                        "description": "OK â€“ list of reviews",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/review.RetrieveReviewDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a review and returns the updated entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Update an existing review",
                "operationId": "updateReview",
                "parameters": [
                    {
                        "description": "Review payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/review.UpdateReviewDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ review updated",
                        "schema": {
                            "$ref": "#/definitions/review.RetrieveReviewDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ validation or update error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Persists a new review entity and returns the created review.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Create a new review",
                "operationId": "createReview",
                "parameters": [
                    {
                        "description": "Review payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/review.CreateReviewDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created â€“ review stored",
                        "schema": {
                            "$ref": "#/definitions/review.RetrieveReviewDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ validation or persistence error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/reviewee/{id}": {
            "get": {
                "description": "Returns all reviews where the given user is the reviewee.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "List reviews about a reviewee",
                "operationId": "getReviewsByRevieweeId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reviewee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ list of reviews",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/review.RetrieveReviewDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/reviewer/{id}": {
            "get": {
                "description": "Returns all reviews authored by the reviewer specified by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "List reviews written by a reviewer",
                "operationId": "getReviewsByReviewerId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reviewer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ list of reviews",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/review.RetrieveReviewDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/reviewer/{reviewerId}/reviewee/{revieweeId}": {
            "get": {
                "description": "Returns the review where \u003creviewerId\u003e is the author and \u003crevieweeId\u003e is the subject.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get review written by one user about another",
                "operationId": "getReviewByReviewerAndReviewee",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reviewer ID",
                        "name": "reviewerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Reviewee ID",
                        "name": "revieweeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ review found",
                        "schema": {
                            "$ref": "#/definitions/review.RetrieveReviewDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/{id}": {
            "get": {
                "description": "Returns review that match given id as an DTO.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get review by id",
                "operationId": "getReviewById",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ review with given id",
                        "schema": {
                            "$ref": "#/definitions/review.RetrieveReviewDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the review identified by its ID.",
                "tags": [
                    "reviews"
                ],
                "summary": "Delete a review",
                "operationId": "deleteReview",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content â€“ review deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or delete failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/sale-offer": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Creates a new sale offer in the database. To create a sale offer, the user must be logged in. There are several constraints on the offer fields, such as:\n- Color must be one of the predefined colors (endpoint: /car/colors)\n- Fuel type must be one of the predefined fuel types (endpoint: /car/fuel_types)\n- Transmission must be one of the predefined transmission types (endpoint: /car/transmissions)\n- Drive must be one of the predefined drive types (endpoint: /car/drives)\n- Model must be one of the predefined models (endpoint: /car/models or /car/models/:id)\n- Number of doors must be between 1 and 6\n- Number of seats must be between 2 and 100\n- Engine power must be less than or equal to 9999 (in horsepower)\n- Engine capacity must be less than or equal to 9000 (in cm3)\n- Number of gears must be between 1 and 10",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Create a new sale offer",
                "parameters": [
                    {
                        "description": "Sale offer form",
                        "name": "offer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sale_offer.CreateSaleOfferDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - returns the created sale offer",
                        "schema": {
                            "$ref": "#/definitions/sale_offer.RetrieveDetailedSaleOfferDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not logged in",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/sale-offer/filtered": {
            "post": {
                "description": "Returns a list of sale offers in paginated form. If the user is logged in, the results contain he offers created by the user. The results are filtered based on request's body. There are several constraints on the filter fields, such as:\n- Offer type must be one of the predefined offer types (endpoint: /sale-offer/offer-types)\n- Order key must be one of the predefined order keys (endpoint: /sale-offer/order-keys)\n- List of manufacturers must contain only predefined manufacturers (endpoint: /car/manufacturers)\n- List of colors must contain only predefined colors (endpoint: /car/colors)\n- List of drives must contain only predefined drives (endpoint: /car/drives)\n- List of fuel types must contain only predefined fuel types (endpoint: /car/fuel_types)\n- List of transmissions must contain only predefined transmission types (endpoint: /car/transmissions)\n- Whenever you use a range, the min value must be less than or equal to the max value, you can provide only one of them, and the other will be ignored.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Get filtered sale offers",
                "parameters": [
                    {
                        "description": "Sale offer filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sale_offer.OfferFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sale offers",
                        "schema": {
                            "$ref": "#/definitions/sale_offer.RetrieveOffersWithPagination"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/sale-offer/id/dislike/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Dislike offer by giving it's id. You have to be logged in to perform this operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Dislike offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sale offer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not logged in",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Sale offer not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/sale-offer/id/like/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Like new offer by giving it's id. You have to be logged in to perform this operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Like new offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sale offer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liked offer",
                        "schema": {
                            "$ref": "#/definitions/liked_offer.LikedOffer"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not logged in",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Sale offer not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/sale-offer/id/{id}": {
            "get": {
                "description": "Returns a sale offer by its ID. Can be used to retrieve detailed information about sale offer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Get sale offer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sale offer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sale offer details",
                        "schema": {
                            "$ref": "#/definitions/sale_offer.RetrieveDetailedSaleOfferDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Sale offer not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/sale-offer/my-offers": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all sale offers created by the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Get my sale offers",
                "parameters": [
                    {
                        "description": "Pagination request",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sale offers",
                        "schema": {
                            "$ref": "#/definitions/sale_offer.RetrieveOffersWithPagination"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not logged in",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/sale-offer/offer-types": {
            "get": {
                "description": "Returns a list of all possible offer types that are accepted when using filtering. If you choose both the auctions and regular offers will be found.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Get offer types",
                "responses": {
                    "200": {
                        "description": "List of offer types",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sale-offer/order-keys": {
            "get": {
                "description": "Returns a list of all possible order keys that are accepted when using filtering.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sale-offer"
                ],
                "summary": "Get order keys",
                "responses": {
                    "200": {
                        "description": "List of order keys",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Return a list of all users stored in database. If user's subtype is person the company related fields will be omitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.RetrieveUserDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates user's data in database from given form. Currently, you can only change basic fields (email, username, password), not the subtype.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "Update form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated",
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "description": "Returns user who has provided email. If user's subtype is person the company related fields will be omitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/user.RetrieveUserDTO"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/id/{id}": {
            "get": {
                "description": "Returns user who has provided id. If user's subtype is person the company related fields will be omitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/user.RetrieveUserDTO"
                        }
                    },
                    "400": {
                        "description": "ID is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes user who has provided id from database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User successfully deleted"
                    },
                    "400": {
                        "description": "ID is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginInput": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "selector": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.LogoutInput": {
            "type": "object",
            "properties": {
                "all_devices": {
                    "type": "boolean"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "auth.RefreshInput": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "car.ManufacturerModelMap": {
            "type": "object",
            "properties": {
                "manufacturers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "models": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "car_params.Color": {
            "type": "string",
            "enum": [
                "Red",
                "Blue",
                "Yellow",
                "Green",
                "Orange",
                "Purple",
                "Brown",
                "Black",
                "White",
                "Gray",
                "Cyan",
                "Magenta",
                "Lime",
                "Navy",
                "Teal",
                "Maroon",
                "Olive",
                "Beige",
                "Gold",
                "Other"
            ],
            "x-enum-varnames": [
                "RED",
                "BLUE",
                "YELLOW",
                "GREEN",
                "ORANGE",
                "PURPLE",
                "BROWN",
                "BLACK",
                "WHITE",
                "GRAY",
                "CYAN",
                "MAGENTA",
                "LIME",
                "NAVY",
                "TEAL",
                "MAROON",
                "OLIVE",
                "BEIGE",
                "GOLD",
                "OTHER"
            ]
        },
        "car_params.Drive": {
            "type": "string",
            "enum": [
                "FWD",
                "RWD",
                "AWD"
            ],
            "x-enum-varnames": [
                "FWD",
                "RWD",
                "AWD"
            ]
        },
        "car_params.FuelType": {
            "type": "string",
            "enum": [
                "Diesel",
                "Petrol",
                "Electric",
                "Ethanol",
                "LPG",
                "Biofuel",
                "Hybrid",
                "Hydrogen"
            ],
            "x-enum-varnames": [
                "DIESEL",
                "PETROL",
                "ELECTRIC",
                "ETHANOL",
                "LPG",
                "BIOFUEL",
                "HYBRID",
                "HYDROGEN"
            ]
        },
        "car_params.Transmission": {
            "type": "string",
            "enum": [
                "Manual",
                "Automatic",
                "CVT",
                "Dual clutch"
            ],
            "x-enum-varnames": [
                "MANUAL",
                "AUTOMATIC",
                "CVT",
                "DUAL_CLUTCH"
            ]
        },
        "custom_errors.HTTPError": {
            "type": "object",
            "properties": {
                "error_description": {
                    "type": "string"
                }
            }
        },
        "liked_offer.LikedOffer": {
            "type": "object",
            "properties": {
                "offer_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "manufacturer.Manufacturer": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.RetrieveModelDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "pagination.PaginationRequest": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                }
            }
        },
        "pagination.PaginationResponse": {
            "type": "object",
            "properties": {
                "total_pages": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "review.CreateReviewDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "reviewee_id": {
                    "type": "integer"
                }
            }
        },
        "review.RetrieveReviewDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "reviewee": {
                    "$ref": "#/definitions/review.UserDTO"
                },
                "reviewer": {
                    "$ref": "#/definitions/review.UserDTO"
                }
            }
        },
        "review.UpdateReviewDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "review.UserDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "sale_offer.CreateSaleOfferDTO": {
            "type": "object",
            "required": [
                "color",
                "description",
                "drive",
                "engine_capacity",
                "engine_power",
                "fuel_type",
                "margin",
                "mileage",
                "model_id",
                "number_of_doors",
                "number_of_gears",
                "number_of_seats",
                "price",
                "production_year",
                "registration_date",
                "registration_number",
                "transmission",
                "vin"
            ],
            "properties": {
                "color": {
                    "$ref": "#/definitions/car_params.Color"
                },
                "description": {
                    "type": "string"
                },
                "drive": {
                    "$ref": "#/definitions/car_params.Drive"
                },
                "engine_capacity": {
                    "type": "integer"
                },
                "engine_power": {
                    "type": "integer"
                },
                "fuel_type": {
                    "$ref": "#/definitions/car_params.FuelType"
                },
                "margin": {
                    "$ref": "#/definitions/sale_offer.MarginValue"
                },
                "mileage": {
                    "type": "integer"
                },
                "model_id": {
                    "type": "integer"
                },
                "number_of_doors": {
                    "type": "integer"
                },
                "number_of_gears": {
                    "type": "integer"
                },
                "number_of_seats": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "production_year": {
                    "type": "integer"
                },
                "registration_date": {
                    "type": "string"
                },
                "registration_number": {
                    "type": "string"
                },
                "transmission": {
                    "$ref": "#/definitions/car_params.Transmission"
                },
                "vin": {
                    "type": "string"
                }
            }
        },
        "sale_offer.MarginValue": {
            "type": "integer",
            "enum": [
                3,
                5,
                10
            ],
            "x-enum-varnames": [
                "LOW_MARGIN",
                "MEDIUM_MARGIN",
                "HIGH_MARGIN"
            ]
        },
        "sale_offer.MinMax-string": {
            "type": "object",
            "properties": {
                "max": {
                    "type": "string"
                },
                "min": {
                    "type": "string"
                }
            }
        },
        "sale_offer.MinMax-uint": {
            "type": "object",
            "properties": {
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                }
            }
        },
        "sale_offer.OfferFilter": {
            "type": "object",
            "properties": {
                "car_registration_date_range": {
                    "$ref": "#/definitions/sale_offer.MinMax-string"
                },
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/car_params.Color"
                    }
                },
                "drives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/car_params.Drive"
                    }
                },
                "engine_capacity_range": {
                    "$ref": "#/definitions/sale_offer.MinMax-uint"
                },
                "engine_power_range": {
                    "$ref": "#/definitions/sale_offer.MinMax-uint"
                },
                "fuel_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/car_params.FuelType"
                    }
                },
                "is_order_desc": {
                    "type": "boolean"
                },
                "liked_only": {
                    "type": "boolean"
                },
                "manufacturers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mileage_range": {
                    "$ref": "#/definitions/sale_offer.MinMax-uint"
                },
                "offer_creation_date_range": {
                    "$ref": "#/definitions/sale_offer.MinMax-string"
                },
                "offer_type": {
                    "$ref": "#/definitions/sale_offer.OfferType"
                },
                "order_key": {
                    "type": "string"
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.PaginationRequest"
                },
                "price_range": {
                    "$ref": "#/definitions/sale_offer.MinMax-uint"
                },
                "query": {
                    "type": "string"
                },
                "transmissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/car_params.Transmission"
                    }
                },
                "user_id": {
                    "type": "integer"
                },
                "year_range": {
                    "$ref": "#/definitions/sale_offer.MinMax-uint"
                }
            }
        },
        "sale_offer.OfferType": {
            "type": "string",
            "enum": [
                "Regular offer",
                "Auction",
                "Both"
            ],
            "x-enum-varnames": [
                "REGULAR_OFFER",
                "AUCTION",
                "BOTH"
            ]
        },
        "sale_offer.RetrieveDetailedSaleOfferDTO": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "buy_now_price": {
                    "type": "integer"
                },
                "can_modify": {
                    "type": "boolean"
                },
                "color": {
                    "$ref": "#/definitions/car_params.Color"
                },
                "date_end": {
                    "type": "string"
                },
                "date_of_issue": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "drive": {
                    "$ref": "#/definitions/car_params.Drive"
                },
                "engine_capacity": {
                    "type": "integer"
                },
                "engine_power": {
                    "type": "integer"
                },
                "fuel_type": {
                    "$ref": "#/definitions/car_params.FuelType"
                },
                "id": {
                    "type": "integer"
                },
                "is_auction": {
                    "type": "boolean"
                },
                "is_liked": {
                    "type": "boolean"
                },
                "margin": {
                    "$ref": "#/definitions/sale_offer.MarginValue"
                },
                "mileage": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "number_of_doors": {
                    "type": "integer"
                },
                "number_of_gears": {
                    "type": "integer"
                },
                "number_of_seats": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "production_year": {
                    "type": "integer"
                },
                "registration_date": {
                    "type": "string"
                },
                "registration_number": {
                    "type": "string"
                },
                "transmission": {
                    "$ref": "#/definitions/car_params.Transmission"
                },
                "username": {
                    "type": "string"
                },
                "vin": {
                    "type": "string"
                }
            }
        },
        "sale_offer.RetrieveOffersWithPagination": {
            "type": "object",
            "properties": {
                "offers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sale_offer.RetrieveSaleOfferDTO"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.PaginationResponse"
                }
            }
        },
        "sale_offer.RetrieveSaleOfferDTO": {
            "type": "object",
            "properties": {
                "can_modify": {
                    "type": "boolean"
                },
                "color": {
                    "$ref": "#/definitions/car_params.Color"
                },
                "id": {
                    "type": "integer"
                },
                "is_auction": {
                    "type": "boolean"
                },
                "is_liked": {
                    "type": "boolean"
                },
                "mileage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "production_year": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserDTO": {
            "type": "object",
            "required": [
                "email",
                "password",
                "selector",
                "username"
            ],
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "selector": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.RetrieveUserDTO": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.UpdateUserDTO": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}