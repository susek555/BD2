// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/susek555/BD2/car-dealer-api/internal/models"
)

// PurchaseCreatorInterface is an autogenerated mock type for the PurchaseCreatorInterface type
type PurchaseCreatorInterface struct {
	mock.Mock
}

type PurchaseCreatorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PurchaseCreatorInterface) EXPECT() *PurchaseCreatorInterface_Expecter {
	return &PurchaseCreatorInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: purchase
func (_m *PurchaseCreatorInterface) Create(purchase *models.Purchase) error {
	ret := _m.Called(purchase)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Purchase) error); ok {
		r0 = rf(purchase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PurchaseCreatorInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PurchaseCreatorInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - purchase *models.Purchase
func (_e *PurchaseCreatorInterface_Expecter) Create(purchase interface{}) *PurchaseCreatorInterface_Create_Call {
	return &PurchaseCreatorInterface_Create_Call{Call: _e.mock.On("Create", purchase)}
}

func (_c *PurchaseCreatorInterface_Create_Call) Run(run func(purchase *models.Purchase)) *PurchaseCreatorInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Purchase))
	})
	return _c
}

func (_c *PurchaseCreatorInterface_Create_Call) Return(_a0 error) *PurchaseCreatorInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PurchaseCreatorInterface_Create_Call) RunAndReturn(run func(*models.Purchase) error) *PurchaseCreatorInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewPurchaseCreatorInterface creates a new instance of PurchaseCreatorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurchaseCreatorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PurchaseCreatorInterface {
	mock := &PurchaseCreatorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
