// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/susek555/BD2/car-dealer-api/internal/models"
)

// RefreshTokenServiceInterface is an autogenerated mock type for the RefreshTokenServiceInterface type
type RefreshTokenServiceInterface struct {
	mock.Mock
}

type RefreshTokenServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RefreshTokenServiceInterface) EXPECT() *RefreshTokenServiceInterface_Expecter {
	return &RefreshTokenServiceInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: entity
func (_m *RefreshTokenServiceInterface) Create(entity *models.RefreshToken) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.RefreshToken) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenServiceInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RefreshTokenServiceInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - entity *models.RefreshToken
func (_e *RefreshTokenServiceInterface_Expecter) Create(entity interface{}) *RefreshTokenServiceInterface_Create_Call {
	return &RefreshTokenServiceInterface_Create_Call{Call: _e.mock.On("Create", entity)}
}

func (_c *RefreshTokenServiceInterface_Create_Call) Run(run func(entity *models.RefreshToken)) *RefreshTokenServiceInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.RefreshToken))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_Create_Call) Return(_a0 error) *RefreshTokenServiceInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshTokenServiceInterface_Create_Call) RunAndReturn(run func(*models.RefreshToken) error) *RefreshTokenServiceInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *RefreshTokenServiceInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenServiceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RefreshTokenServiceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *RefreshTokenServiceInterface_Expecter) Delete(id interface{}) *RefreshTokenServiceInterface_Delete_Call {
	return &RefreshTokenServiceInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *RefreshTokenServiceInterface_Delete_Call) Run(run func(id uint)) *RefreshTokenServiceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_Delete_Call) Return(_a0 error) *RefreshTokenServiceInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshTokenServiceInterface_Delete_Call) RunAndReturn(run func(uint) error) *RefreshTokenServiceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUserId provides a mock function with given fields: userID
func (_m *RefreshTokenServiceInterface) DeleteByUserId(userID uint) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenServiceInterface_DeleteByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserId'
type RefreshTokenServiceInterface_DeleteByUserId_Call struct {
	*mock.Call
}

// DeleteByUserId is a helper method to define mock.On call
//   - userID uint
func (_e *RefreshTokenServiceInterface_Expecter) DeleteByUserId(userID interface{}) *RefreshTokenServiceInterface_DeleteByUserId_Call {
	return &RefreshTokenServiceInterface_DeleteByUserId_Call{Call: _e.mock.On("DeleteByUserId", userID)}
}

func (_c *RefreshTokenServiceInterface_DeleteByUserId_Call) Run(run func(userID uint)) *RefreshTokenServiceInterface_DeleteByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_DeleteByUserId_Call) Return(_a0 error) *RefreshTokenServiceInterface_DeleteByUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshTokenServiceInterface_DeleteByUserId_Call) RunAndReturn(run func(uint) error) *RefreshTokenServiceInterface_DeleteByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByToken provides a mock function with given fields: token
func (_m *RefreshTokenServiceInterface) FindByToken(token string) (*models.RefreshToken, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.RefreshToken, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.RefreshToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenServiceInterface_FindByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByToken'
type RefreshTokenServiceInterface_FindByToken_Call struct {
	*mock.Call
}

// FindByToken is a helper method to define mock.On call
//   - token string
func (_e *RefreshTokenServiceInterface_Expecter) FindByToken(token interface{}) *RefreshTokenServiceInterface_FindByToken_Call {
	return &RefreshTokenServiceInterface_FindByToken_Call{Call: _e.mock.On("FindByToken", token)}
}

func (_c *RefreshTokenServiceInterface_FindByToken_Call) Run(run func(token string)) *RefreshTokenServiceInterface_FindByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_FindByToken_Call) Return(_a0 *models.RefreshToken, _a1 error) *RefreshTokenServiceInterface_FindByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenServiceInterface_FindByToken_Call) RunAndReturn(run func(string) (*models.RefreshToken, error)) *RefreshTokenServiceInterface_FindByToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserEmail provides a mock function with given fields: email
func (_m *RefreshTokenServiceInterface) FindByUserEmail(email string) ([]models.RefreshToken, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserEmail")
	}

	var r0 []models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.RefreshToken, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) []models.RefreshToken); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenServiceInterface_FindByUserEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserEmail'
type RefreshTokenServiceInterface_FindByUserEmail_Call struct {
	*mock.Call
}

// FindByUserEmail is a helper method to define mock.On call
//   - email string
func (_e *RefreshTokenServiceInterface_Expecter) FindByUserEmail(email interface{}) *RefreshTokenServiceInterface_FindByUserEmail_Call {
	return &RefreshTokenServiceInterface_FindByUserEmail_Call{Call: _e.mock.On("FindByUserEmail", email)}
}

func (_c *RefreshTokenServiceInterface_FindByUserEmail_Call) Run(run func(email string)) *RefreshTokenServiceInterface_FindByUserEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_FindByUserEmail_Call) Return(_a0 []models.RefreshToken, _a1 error) *RefreshTokenServiceInterface_FindByUserEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenServiceInterface_FindByUserEmail_Call) RunAndReturn(run func(string) ([]models.RefreshToken, error)) *RefreshTokenServiceInterface_FindByUserEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserId provides a mock function with given fields: id
func (_m *RefreshTokenServiceInterface) FindByUserId(id uint) ([]models.RefreshToken, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 []models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.RefreshToken, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.RefreshToken); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenServiceInterface_FindByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserId'
type RefreshTokenServiceInterface_FindByUserId_Call struct {
	*mock.Call
}

// FindByUserId is a helper method to define mock.On call
//   - id uint
func (_e *RefreshTokenServiceInterface_Expecter) FindByUserId(id interface{}) *RefreshTokenServiceInterface_FindByUserId_Call {
	return &RefreshTokenServiceInterface_FindByUserId_Call{Call: _e.mock.On("FindByUserId", id)}
}

func (_c *RefreshTokenServiceInterface_FindByUserId_Call) Run(run func(id uint)) *RefreshTokenServiceInterface_FindByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_FindByUserId_Call) Return(_a0 []models.RefreshToken, _a1 error) *RefreshTokenServiceInterface_FindByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenServiceInterface_FindByUserId_Call) RunAndReturn(run func(uint) ([]models.RefreshToken, error)) *RefreshTokenServiceInterface_FindByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *RefreshTokenServiceInterface) GetAll() ([]models.RefreshToken, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.RefreshToken, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.RefreshToken); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenServiceInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type RefreshTokenServiceInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *RefreshTokenServiceInterface_Expecter) GetAll() *RefreshTokenServiceInterface_GetAll_Call {
	return &RefreshTokenServiceInterface_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *RefreshTokenServiceInterface_GetAll_Call) Run(run func()) *RefreshTokenServiceInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_GetAll_Call) Return(_a0 []models.RefreshToken, _a1 error) *RefreshTokenServiceInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenServiceInterface_GetAll_Call) RunAndReturn(run func() ([]models.RefreshToken, error)) *RefreshTokenServiceInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *RefreshTokenServiceInterface) GetById(id uint) (*models.RefreshToken, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.RefreshToken, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.RefreshToken); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenServiceInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type RefreshTokenServiceInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id uint
func (_e *RefreshTokenServiceInterface_Expecter) GetById(id interface{}) *RefreshTokenServiceInterface_GetById_Call {
	return &RefreshTokenServiceInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *RefreshTokenServiceInterface_GetById_Call) Run(run func(id uint)) *RefreshTokenServiceInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_GetById_Call) Return(_a0 *models.RefreshToken, _a1 error) *RefreshTokenServiceInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenServiceInterface_GetById_Call) RunAndReturn(run func(uint) (*models.RefreshToken, error)) *RefreshTokenServiceInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: entity
func (_m *RefreshTokenServiceInterface) Update(entity *models.RefreshToken) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.RefreshToken) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenServiceInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RefreshTokenServiceInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - entity *models.RefreshToken
func (_e *RefreshTokenServiceInterface_Expecter) Update(entity interface{}) *RefreshTokenServiceInterface_Update_Call {
	return &RefreshTokenServiceInterface_Update_Call{Call: _e.mock.On("Update", entity)}
}

func (_c *RefreshTokenServiceInterface_Update_Call) Run(run func(entity *models.RefreshToken)) *RefreshTokenServiceInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.RefreshToken))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_Update_Call) Return(_a0 error) *RefreshTokenServiceInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshTokenServiceInterface_Update_Call) RunAndReturn(run func(*models.RefreshToken) error) *RefreshTokenServiceInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyExpiration provides a mock function with given fields: token
func (_m *RefreshTokenServiceInterface) VerifyExpiration(token *models.RefreshToken) (*models.RefreshToken, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyExpiration")
	}

	var r0 *models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.RefreshToken) (*models.RefreshToken, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*models.RefreshToken) *models.RefreshToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.RefreshToken) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenServiceInterface_VerifyExpiration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyExpiration'
type RefreshTokenServiceInterface_VerifyExpiration_Call struct {
	*mock.Call
}

// VerifyExpiration is a helper method to define mock.On call
//   - token *models.RefreshToken
func (_e *RefreshTokenServiceInterface_Expecter) VerifyExpiration(token interface{}) *RefreshTokenServiceInterface_VerifyExpiration_Call {
	return &RefreshTokenServiceInterface_VerifyExpiration_Call{Call: _e.mock.On("VerifyExpiration", token)}
}

func (_c *RefreshTokenServiceInterface_VerifyExpiration_Call) Run(run func(token *models.RefreshToken)) *RefreshTokenServiceInterface_VerifyExpiration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.RefreshToken))
	})
	return _c
}

func (_c *RefreshTokenServiceInterface_VerifyExpiration_Call) Return(_a0 *models.RefreshToken, _a1 error) *RefreshTokenServiceInterface_VerifyExpiration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenServiceInterface_VerifyExpiration_Call) RunAndReturn(run func(*models.RefreshToken) (*models.RefreshToken, error)) *RefreshTokenServiceInterface_VerifyExpiration_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefreshTokenServiceInterface creates a new instance of RefreshTokenServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenServiceInterface {
	mock := &RefreshTokenServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
