// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/susek555/BD2/car-dealer-api/internal/models"
	pagination "github.com/susek555/BD2/car-dealer-api/pkg/pagination"

	review "github.com/susek555/BD2/car-dealer-api/internal/domains/review"
)

// ReviewRepositoryInterface is an autogenerated mock type for the ReviewRepositoryInterface type
type ReviewRepositoryInterface struct {
	mock.Mock
}

type ReviewRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ReviewRepositoryInterface) EXPECT() *ReviewRepositoryInterface_Expecter {
	return &ReviewRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: entity
func (_m *ReviewRepositoryInterface) Create(entity *models.Review) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Review) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReviewRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReviewRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - entity *models.Review
func (_e *ReviewRepositoryInterface_Expecter) Create(entity interface{}) *ReviewRepositoryInterface_Create_Call {
	return &ReviewRepositoryInterface_Create_Call{Call: _e.mock.On("Create", entity)}
}

func (_c *ReviewRepositoryInterface_Create_Call) Run(run func(entity *models.Review)) *ReviewRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Review))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_Create_Call) Return(_a0 error) *ReviewRepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReviewRepositoryInterface_Create_Call) RunAndReturn(run func(*models.Review) error) *ReviewRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *ReviewRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReviewRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ReviewRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *ReviewRepositoryInterface_Expecter) Delete(id interface{}) *ReviewRepositoryInterface_Delete_Call {
	return &ReviewRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *ReviewRepositoryInterface_Delete_Call) Run(run func(id uint)) *ReviewRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_Delete_Call) Return(_a0 error) *ReviewRepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReviewRepositoryInterface_Delete_Call) RunAndReturn(run func(uint) error) *ReviewRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *ReviewRepositoryInterface) GetAll() ([]models.Review, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Review, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Review); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ReviewRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *ReviewRepositoryInterface_Expecter) GetAll() *ReviewRepositoryInterface_GetAll_Call {
	return &ReviewRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *ReviewRepositoryInterface_GetAll_Call) Run(run func()) *ReviewRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetAll_Call) Return(_a0 []models.Review, _a1 error) *ReviewRepositoryInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetAll_Call) RunAndReturn(run func() ([]models.Review, error)) *ReviewRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAverageRatingByRevieweeID provides a mock function with given fields: revieweeID
func (_m *ReviewRepositoryInterface) GetAverageRatingByRevieweeID(revieweeID uint) (float64, error) {
	ret := _m.Called(revieweeID)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageRatingByRevieweeID")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (float64, error)); ok {
		return rf(revieweeID)
	}
	if rf, ok := ret.Get(0).(func(uint) float64); ok {
		r0 = rf(revieweeID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(revieweeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageRatingByRevieweeID'
type ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call struct {
	*mock.Call
}

// GetAverageRatingByRevieweeID is a helper method to define mock.On call
//   - revieweeID uint
func (_e *ReviewRepositoryInterface_Expecter) GetAverageRatingByRevieweeID(revieweeID interface{}) *ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call {
	return &ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call{Call: _e.mock.On("GetAverageRatingByRevieweeID", revieweeID)}
}

func (_c *ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call) Run(run func(revieweeID uint)) *ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call) Return(_a0 float64, _a1 error) *ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call) RunAndReturn(run func(uint) (float64, error)) *ReviewRepositoryInterface_GetAverageRatingByRevieweeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *ReviewRepositoryInterface) GetByID(id uint) (*models.Review, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Review, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Review); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ReviewRepositoryInterface_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint
func (_e *ReviewRepositoryInterface_Expecter) GetByID(id interface{}) *ReviewRepositoryInterface_GetByID_Call {
	return &ReviewRepositoryInterface_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *ReviewRepositoryInterface_GetByID_Call) Run(run func(id uint)) *ReviewRepositoryInterface_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetByID_Call) Return(_a0 *models.Review, _a1 error) *ReviewRepositoryInterface_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetByID_Call) RunAndReturn(run func(uint) (*models.Review, error)) *ReviewRepositoryInterface_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRevieweeID provides a mock function with given fields: reviewedID
func (_m *ReviewRepositoryInterface) GetByRevieweeID(reviewedID uint) ([]models.Review, error) {
	ret := _m.Called(reviewedID)

	if len(ret) == 0 {
		panic("no return value specified for GetByRevieweeID")
	}

	var r0 []models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Review, error)); ok {
		return rf(reviewedID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Review); ok {
		r0 = rf(reviewedID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(reviewedID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetByRevieweeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRevieweeID'
type ReviewRepositoryInterface_GetByRevieweeID_Call struct {
	*mock.Call
}

// GetByRevieweeID is a helper method to define mock.On call
//   - reviewedID uint
func (_e *ReviewRepositoryInterface_Expecter) GetByRevieweeID(reviewedID interface{}) *ReviewRepositoryInterface_GetByRevieweeID_Call {
	return &ReviewRepositoryInterface_GetByRevieweeID_Call{Call: _e.mock.On("GetByRevieweeID", reviewedID)}
}

func (_c *ReviewRepositoryInterface_GetByRevieweeID_Call) Run(run func(reviewedID uint)) *ReviewRepositoryInterface_GetByRevieweeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetByRevieweeID_Call) Return(_a0 []models.Review, _a1 error) *ReviewRepositoryInterface_GetByRevieweeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetByRevieweeID_Call) RunAndReturn(run func(uint) ([]models.Review, error)) *ReviewRepositoryInterface_GetByRevieweeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByReviewerID provides a mock function with given fields: reviewerID
func (_m *ReviewRepositoryInterface) GetByReviewerID(reviewerID uint) ([]models.Review, error) {
	ret := _m.Called(reviewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetByReviewerID")
	}

	var r0 []models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Review, error)); ok {
		return rf(reviewerID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Review); ok {
		r0 = rf(reviewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(reviewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetByReviewerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByReviewerID'
type ReviewRepositoryInterface_GetByReviewerID_Call struct {
	*mock.Call
}

// GetByReviewerID is a helper method to define mock.On call
//   - reviewerID uint
func (_e *ReviewRepositoryInterface_Expecter) GetByReviewerID(reviewerID interface{}) *ReviewRepositoryInterface_GetByReviewerID_Call {
	return &ReviewRepositoryInterface_GetByReviewerID_Call{Call: _e.mock.On("GetByReviewerID", reviewerID)}
}

func (_c *ReviewRepositoryInterface_GetByReviewerID_Call) Run(run func(reviewerID uint)) *ReviewRepositoryInterface_GetByReviewerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerID_Call) Return(_a0 []models.Review, _a1 error) *ReviewRepositoryInterface_GetByReviewerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerID_Call) RunAndReturn(run func(uint) ([]models.Review, error)) *ReviewRepositoryInterface_GetByReviewerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByReviewerIDAndRevieweeID provides a mock function with given fields: reviewerID, reviewedID
func (_m *ReviewRepositoryInterface) GetByReviewerIDAndRevieweeID(reviewerID uint, reviewedID uint) (*models.Review, error) {
	ret := _m.Called(reviewerID, reviewedID)

	if len(ret) == 0 {
		panic("no return value specified for GetByReviewerIDAndRevieweeID")
	}

	var r0 *models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*models.Review, error)); ok {
		return rf(reviewerID, reviewedID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *models.Review); ok {
		r0 = rf(reviewerID, reviewedID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(reviewerID, reviewedID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByReviewerIDAndRevieweeID'
type ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call struct {
	*mock.Call
}

// GetByReviewerIDAndRevieweeID is a helper method to define mock.On call
//   - reviewerID uint
//   - reviewedID uint
func (_e *ReviewRepositoryInterface_Expecter) GetByReviewerIDAndRevieweeID(reviewerID interface{}, reviewedID interface{}) *ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call {
	return &ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call{Call: _e.mock.On("GetByReviewerIDAndRevieweeID", reviewerID, reviewedID)}
}

func (_c *ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call) Run(run func(reviewerID uint, reviewedID uint)) *ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call) Return(_a0 *models.Review, _a1 error) *ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call) RunAndReturn(run func(uint, uint) (*models.Review, error)) *ReviewRepositoryInterface_GetByReviewerIDAndRevieweeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFiltered provides a mock function with given fields: filter
func (_m *ReviewRepositoryInterface) GetFiltered(filter *review.ReviewFilter) ([]models.Review, *pagination.PaginationResponse, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetFiltered")
	}

	var r0 []models.Review
	var r1 *pagination.PaginationResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(*review.ReviewFilter) ([]models.Review, *pagination.PaginationResponse, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*review.ReviewFilter) []models.Review); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(*review.ReviewFilter) *pagination.PaginationResponse); ok {
		r1 = rf(filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.PaginationResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(*review.ReviewFilter) error); ok {
		r2 = rf(filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReviewRepositoryInterface_GetFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFiltered'
type ReviewRepositoryInterface_GetFiltered_Call struct {
	*mock.Call
}

// GetFiltered is a helper method to define mock.On call
//   - filter *review.ReviewFilter
func (_e *ReviewRepositoryInterface_Expecter) GetFiltered(filter interface{}) *ReviewRepositoryInterface_GetFiltered_Call {
	return &ReviewRepositoryInterface_GetFiltered_Call{Call: _e.mock.On("GetFiltered", filter)}
}

func (_c *ReviewRepositoryInterface_GetFiltered_Call) Run(run func(filter *review.ReviewFilter)) *ReviewRepositoryInterface_GetFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*review.ReviewFilter))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetFiltered_Call) Return(_a0 []models.Review, _a1 *pagination.PaginationResponse, _a2 error) *ReviewRepositoryInterface_GetFiltered_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReviewRepositoryInterface_GetFiltered_Call) RunAndReturn(run func(*review.ReviewFilter) ([]models.Review, *pagination.PaginationResponse, error)) *ReviewRepositoryInterface_GetFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// GetFrequencyOfRatingByRevieweeID provides a mock function with given fields: revieweeID
func (_m *ReviewRepositoryInterface) GetFrequencyOfRatingByRevieweeID(revieweeID uint) (map[int]int, error) {
	ret := _m.Called(revieweeID)

	if len(ret) == 0 {
		panic("no return value specified for GetFrequencyOfRatingByRevieweeID")
	}

	var r0 map[int]int
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (map[int]int, error)); ok {
		return rf(revieweeID)
	}
	if rf, ok := ret.Get(0).(func(uint) map[int]int); ok {
		r0 = rf(revieweeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]int)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(revieweeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFrequencyOfRatingByRevieweeID'
type ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call struct {
	*mock.Call
}

// GetFrequencyOfRatingByRevieweeID is a helper method to define mock.On call
//   - revieweeID uint
func (_e *ReviewRepositoryInterface_Expecter) GetFrequencyOfRatingByRevieweeID(revieweeID interface{}) *ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call {
	return &ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call{Call: _e.mock.On("GetFrequencyOfRatingByRevieweeID", revieweeID)}
}

func (_c *ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call) Run(run func(revieweeID uint)) *ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call) Return(_a0 map[int]int, _a1 error) *ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call) RunAndReturn(run func(uint) (map[int]int, error)) *ReviewRepositoryInterface_GetFrequencyOfRatingByRevieweeID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: entity
func (_m *ReviewRepositoryInterface) Update(entity *models.Review) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Review) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReviewRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ReviewRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - entity *models.Review
func (_e *ReviewRepositoryInterface_Expecter) Update(entity interface{}) *ReviewRepositoryInterface_Update_Call {
	return &ReviewRepositoryInterface_Update_Call{Call: _e.mock.On("Update", entity)}
}

func (_c *ReviewRepositoryInterface_Update_Call) Run(run func(entity *models.Review)) *ReviewRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Review))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_Update_Call) Return(_a0 error) *ReviewRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReviewRepositoryInterface_Update_Call) RunAndReturn(run func(*models.Review) error) *ReviewRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewReviewRepositoryInterface creates a new instance of ReviewRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewRepositoryInterface {
	mock := &ReviewRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
