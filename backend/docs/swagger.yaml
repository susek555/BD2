definitions:
  auction.CreateAuctionDTO:
    properties:
      buy_now_price:
        type: integer
      color:
        $ref: '#/definitions/enums.Color'
      date_end:
        type: string
      description:
        type: string
      drive:
        $ref: '#/definitions/enums.Drive'
      engine_capacity:
        type: integer
      engine_power:
        type: integer
      fuel_type:
        $ref: '#/definitions/enums.FuelType'
      manufacturer:
        type: string
      margin:
        $ref: '#/definitions/enums.MarginValue'
      mileage:
        type: integer
      model:
        type: string
      number_of_doors:
        type: integer
      number_of_gears:
        type: integer
      number_of_seats:
        type: integer
      price:
        type: integer
      production_year:
        type: integer
      registration_date:
        type: string
      registration_number:
        type: string
      transmission:
        $ref: '#/definitions/enums.Transmission'
      vin:
        type: string
    required:
    - color
    - description
    - drive
    - engine_capacity
    - engine_power
    - fuel_type
    - manufacturer
    - margin
    - mileage
    - model
    - number_of_doors
    - number_of_gears
    - number_of_seats
    - price
    - production_year
    - registration_date
    - registration_number
    - transmission
    - vin
    type: object
  auction.RetrieveAuctionDTO:
    properties:
      buy_now_price:
        type: integer
      can_modify:
        type: boolean
      color:
        $ref: '#/definitions/enums.Color'
      date_end:
        type: string
      id:
        type: integer
      is_auction:
        type: boolean
      is_liked:
        type: boolean
      main_url:
        type: string
      mileage:
        type: integer
      name:
        type: string
      price:
        type: integer
      production_year:
        type: integer
      status:
        type: string
      username:
        type: string
    type: object
  auction.UpdateAuctionDTO:
    properties:
      buy_now_price:
        type: integer
      color:
        $ref: '#/definitions/enums.Color'
      date_end:
        type: string
      description:
        type: string
      drive:
        $ref: '#/definitions/enums.Drive'
      engine_capacity:
        type: integer
      engine_power:
        type: integer
      fuel_type:
        $ref: '#/definitions/enums.FuelType'
      id:
        type: integer
      manufacturer:
        type: string
      margin:
        $ref: '#/definitions/enums.MarginValue'
      mileage:
        type: integer
      model:
        type: string
      number_of_doors:
        type: integer
      number_of_gears:
        type: integer
      number_of_seats:
        type: integer
      price:
        type: integer
      production_year:
        type: integer
      registration_date:
        type: string
      registration_number:
        type: string
      transmission:
        $ref: '#/definitions/enums.Transmission'
      vin:
        type: string
    type: object
  auth.ChangePasswordDTO:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  auth.ChangePasswordResponse:
    properties:
      errors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  auth.LoginInput:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  auth.LoginResponse:
    properties:
      access_token:
        type: string
      company_name:
        type: string
      company_nip:
        type: string
      email:
        type: string
      errors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      person_name:
        type: string
      person_surname:
        type: string
      refresh_token:
        type: string
      selector:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  auth.LogoutInput:
    properties:
      all_devices:
        type: boolean
      refresh_token:
        type: string
    type: object
  auth.RefreshInput:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterResponse:
    properties:
      errors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  bid.CreateBidDTO:
    properties:
      amount:
        type: integer
      auction_id:
        type: integer
    required:
    - amount
    - auction_id
    type: object
  bid.RetrieveBidDTO:
    properties:
      amount:
        type: integer
      auction_id:
        type: integer
      bidder_id:
        type: integer
    required:
    - amount
    - auction_id
    - bidder_id
    type: object
  car.ManufacturerModelMap:
    properties:
      manufacturers:
        items:
          type: string
        type: array
      models:
        items:
          items:
            type: string
          type: array
        type: array
    type: object
  custom_errors.HTTPError:
    properties:
      error_description:
        type: string
    type: object
  enums.Color:
    enum:
    - Red
    - Blue
    - Yellow
    - Green
    - Orange
    - Purple
    - Brown
    - Black
    - White
    - Gray
    - Cyan
    - Magenta
    - Lime
    - Navy
    - Teal
    - Maroon
    - Olive
    - Beige
    - Gold
    - Other
    type: string
    x-enum-varnames:
    - RED
    - BLUE
    - YELLOW
    - GREEN
    - ORANGE
    - PURPLE
    - BROWN
    - BLACK
    - WHITE
    - GRAY
    - CYAN
    - MAGENTA
    - LIME
    - NAVY
    - TEAL
    - MAROON
    - OLIVE
    - BEIGE
    - GOLD
    - OTHER
  enums.Drive:
    enum:
    - FWD
    - RWD
    - AWD
    type: string
    x-enum-varnames:
    - FWD
    - RWD
    - AWD
  enums.FuelType:
    enum:
    - Diesel
    - Petrol
    - Electric
    - Ethanol
    - LPG
    - Biofuel
    - Hybrid
    - Hydrogen
    type: string
    x-enum-varnames:
    - DIESEL
    - PETROL
    - ELECTRIC
    - ETHANOL
    - LPG
    - BIOFUEL
    - HYBRID
    - HYDROGEN
  enums.MarginValue:
    enum:
    - 3
    - 5
    - 10
    type: integer
    x-enum-varnames:
    - LOW_MARGIN
    - MEDIUM_MARGIN
    - HIGH_MARGIN
  enums.Transmission:
    enum:
    - Manual
    - Automatic
    - Cvt
    - Dual clutch
    type: string
    x-enum-varnames:
    - MANUAL
    - AUTOMATIC
    - CVT
    - DUAL_CLUTCH
  manufacturer.RetrieveManufacturerDTO:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.RetrieveModelDTO:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  pagination.PaginationRequest:
    properties:
      page:
        type: integer
      page_size:
        type: integer
    type: object
  pagination.PaginationResponse:
    properties:
      total_pages:
        type: integer
      total_records:
        type: integer
    type: object
  review.CreateReviewDTO:
    properties:
      description:
        type: string
      rating:
        type: integer
      reviewee_id:
        type: integer
    type: object
  review.RetrieveReviewDTO:
    properties:
      description:
        type: string
      id:
        type: integer
      rating:
        type: integer
      review_date:
        type: string
      reviewee:
        $ref: '#/definitions/review.UserDTO'
      reviewer:
        $ref: '#/definitions/review.UserDTO'
    type: object
  review.RetrieveReviewsWithPagination:
    properties:
      pagination:
        $ref: '#/definitions/pagination.PaginationResponse'
      reviews:
        items:
          $ref: '#/definitions/review.RetrieveReviewDTO'
        type: array
    type: object
  review.ReviewFilter:
    properties:
      is_order_desc:
        type: boolean
      order_key:
        type: string
      pagination:
        $ref: '#/definitions/pagination.PaginationRequest'
      ratings:
        items:
          type: integer
        type: array
      reviewee_id:
        type: integer
      reviewer_id:
        type: integer
    type: object
  review.UpdateReviewDTO:
    properties:
      description:
        type: string
      id:
        type: integer
      rating:
        type: integer
    type: object
  review.UserDTO:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  sale_offer.CreateSaleOfferDTO:
    properties:
      color:
        $ref: '#/definitions/enums.Color'
      description:
        type: string
      drive:
        $ref: '#/definitions/enums.Drive'
      engine_capacity:
        type: integer
      engine_power:
        type: integer
      fuel_type:
        $ref: '#/definitions/enums.FuelType'
      manufacturer:
        type: string
      margin:
        $ref: '#/definitions/enums.MarginValue'
      mileage:
        type: integer
      model:
        type: string
      number_of_doors:
        type: integer
      number_of_gears:
        type: integer
      number_of_seats:
        type: integer
      price:
        type: integer
      production_year:
        type: integer
      registration_date:
        type: string
      registration_number:
        type: string
      transmission:
        $ref: '#/definitions/enums.Transmission'
      vin:
        type: string
    required:
    - color
    - description
    - drive
    - engine_capacity
    - engine_power
    - fuel_type
    - manufacturer
    - margin
    - mileage
    - model
    - number_of_doors
    - number_of_gears
    - number_of_seats
    - price
    - production_year
    - registration_date
    - registration_number
    - transmission
    - vin
    type: object
  sale_offer.MinMax-string:
    properties:
      max:
        type: string
      min:
        type: string
    type: object
  sale_offer.MinMax-uint:
    properties:
      max:
        type: integer
      min:
        type: integer
    type: object
  sale_offer.OfferFilter:
    properties:
      car_registration_date_range:
        $ref: '#/definitions/sale_offer.MinMax-string'
      colors:
        items:
          $ref: '#/definitions/enums.Color'
        type: array
      drives:
        items:
          $ref: '#/definitions/enums.Drive'
        type: array
      engine_capacity_range:
        $ref: '#/definitions/sale_offer.MinMax-uint'
      engine_power_range:
        $ref: '#/definitions/sale_offer.MinMax-uint'
      fuel_types:
        items:
          $ref: '#/definitions/enums.FuelType'
        type: array
      is_order_desc:
        type: boolean
      liked_only:
        type: boolean
      manufacturers:
        items:
          type: string
        type: array
      mileage_range:
        $ref: '#/definitions/sale_offer.MinMax-uint'
      offer_creation_date_range:
        $ref: '#/definitions/sale_offer.MinMax-string'
      offer_type:
        $ref: '#/definitions/sale_offer.OfferType'
      order_key:
        type: string
      pagination:
        $ref: '#/definitions/pagination.PaginationRequest'
      price_range:
        $ref: '#/definitions/sale_offer.MinMax-uint'
      query:
        type: string
      transmissions:
        items:
          $ref: '#/definitions/enums.Transmission'
        type: array
      user_id:
        type: integer
      year_range:
        $ref: '#/definitions/sale_offer.MinMax-uint'
    type: object
  sale_offer.OfferType:
    enum:
    - Regular offer
    - Auction
    - Both
    type: string
    x-enum-varnames:
    - REGULAR_OFFER
    - AUCTION
    - BOTH
  sale_offer.RetrieveDetailedSaleOfferDTO:
    properties:
      brand:
        type: string
      buy_now_price:
        type: integer
      can_modify:
        type: boolean
      color:
        $ref: '#/definitions/enums.Color'
      date_end:
        type: string
      date_of_issue:
        type: string
      description:
        type: string
      drive:
        $ref: '#/definitions/enums.Drive'
      engine_capacity:
        type: integer
      engine_power:
        type: integer
      fuel_type:
        $ref: '#/definitions/enums.FuelType'
      id:
        type: integer
      images_urls:
        items:
          type: string
        type: array
      is_auction:
        type: boolean
      is_liked:
        type: boolean
      margin:
        $ref: '#/definitions/enums.MarginValue'
      mileage:
        type: integer
      model:
        type: string
      number_of_doors:
        type: integer
      number_of_gears:
        type: integer
      number_of_seats:
        type: integer
      price:
        type: integer
      production_year:
        type: integer
      registration_date:
        type: string
      registration_number:
        type: string
      status:
        type: string
      transmission:
        $ref: '#/definitions/enums.Transmission'
      user_id:
        type: integer
      username:
        type: string
      vin:
        type: string
    type: object
  sale_offer.RetrieveOffersWithPagination:
    properties:
      offers:
        items:
          $ref: '#/definitions/sale_offer.RetrieveSaleOfferDTO'
        type: array
      pagination:
        $ref: '#/definitions/pagination.PaginationResponse'
    type: object
  sale_offer.RetrieveSaleOfferDTO:
    properties:
      can_modify:
        type: boolean
      color:
        $ref: '#/definitions/enums.Color'
      id:
        type: integer
      is_auction:
        type: boolean
      is_liked:
        type: boolean
      main_url:
        type: string
      mileage:
        type: integer
      name:
        type: string
      price:
        type: integer
      production_year:
        type: integer
      status:
        type: string
      username:
        type: string
    type: object
  sale_offer.UpdateSaleOfferDTO:
    properties:
      color:
        $ref: '#/definitions/enums.Color'
      description:
        type: string
      drive:
        $ref: '#/definitions/enums.Drive'
      engine_capacity:
        type: integer
      engine_power:
        type: integer
      fuel_type:
        $ref: '#/definitions/enums.FuelType'
      id:
        type: integer
      manufacturer:
        type: string
      margin:
        $ref: '#/definitions/enums.MarginValue'
      mileage:
        type: integer
      model:
        type: string
      number_of_doors:
        type: integer
      number_of_gears:
        type: integer
      number_of_seats:
        type: integer
      price:
        type: integer
      production_year:
        type: integer
      registration_date:
        type: string
      registration_number:
        type: string
      transmission:
        $ref: '#/definitions/enums.Transmission'
      vin:
        type: string
    type: object
  user.CreateUserDTO:
    properties:
      company_name:
        type: string
      company_nip:
        type: string
      email:
        type: string
      password:
        type: string
      person_name:
        type: string
      person_surname:
        type: string
      selector:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - selector
    - username
    type: object
  user.RetrieveUserDTO:
    properties:
      company_name:
        type: string
      company_nip:
        type: string
      email:
        type: string
      id:
        type: integer
      person_name:
        type: string
      person_surname:
        type: string
      username:
        type: string
    type: object
  user.UpdateResponse:
    properties:
      errors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  user.UpdateUserDTO:
    properties:
      company_name:
        type: string
      company_nip:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      person_name:
        type: string
      person_surname:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: BD2
  description: Car-Dealer API
  license:
    name: MIT
  title: Car‑Dealer API
  version: "1.0"
paths:
  /auction:
    get:
      consumes:
      - application/json
      description: Retrieves all available auctions from the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/auction.RetrieveAuctionDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get all auctions
      tags:
      - auction
    post:
      consumes:
      - application/json
      description: Creates a new auction with the provided details
      parameters:
      - description: Auction details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auction.CreateAuctionDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created auction
          schema:
            $ref: '#/definitions/auction.RetrieveAuctionDTO'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - BearerAuth: []
      summary: Create Auction
      tags:
      - auction
    put:
      consumes:
      - application/json
      description: Updates an existing auction with the provided details
      parameters:
      - description: Auction details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auction.UpdateAuctionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Updated auction
          schema:
            $ref: '#/definitions/auction.RetrieveAuctionDTO'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - BearerAuth: []
      summary: Update auction
      tags:
      - auction
  /auction/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific auction by its ID
      parameters:
      - description: Auction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete auction by ID
      tags:
      - auction
    get:
      consumes:
      - application/json
      description: Retrieves a specific auction by its ID
      parameters:
      - description: Auction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auction.RetrieveAuctionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get auction by ID
      tags:
      - auction
  /auctions/buy-now/{id}:
    delete:
      consumes:
      - application/json
      description: Allows a user to instantly purchase an auction at its buy now price
        if available
      parameters:
      - description: Auction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully purchased the auction
        "400":
          description: Invalid auction ID or buy now operation failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user not logged in
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - BearerAuth: []
      summary: Buy an auction at its buy now price
      tags:
      - auctions
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Changes the password of the authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Password change details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Password successfully changed
        "400":
          description: Invalid request or password validation failed
          schema:
            $ref: '#/definitions/auth.ChangePasswordResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/auth.ChangePasswordResponse'
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a pair of tokens and user data
      parameters:
      - description: Login form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - returns tokens and data of the user
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.LoginResponse'
      security:
      - Bearer: []
      summary: Login user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access tokens
      parameters:
      - description: Refresh token form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - returns new access token
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Refresh tokens
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Set up account and return the status
      parameters:
      - description: Registration form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created - returns tokens
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "409":
          description: Login taken
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
      summary: Register new user
      tags:
      - auth
  /bid:
    get:
      consumes:
      - application/json
      description: Retrieve all bids
      produces:
      - application/json
      responses:
        "200":
          description: List of bids
          schema:
            items:
              $ref: '#/definitions/bid.RetrieveBidDTO'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get all bids
      tags:
      - bid
    post:
      consumes:
      - application/json
      description: Create a new bid for an auction
      parameters:
      - description: Bid details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/bid.CreateBidDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created bid
          schema:
            $ref: '#/definitions/bid.RetrieveBidDTO'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - BearerAuth: []
      summary: Create a new bid
      tags:
      - bid
  /bid/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a bid by its ID
      parameters:
      - description: Bid ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Bid details
          schema:
            $ref: '#/definitions/bid.RetrieveBidDTO'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get bid by ID
      tags:
      - bid
  /bid/auction/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves all bids placed on a specific auction
      parameters:
      - description: Auction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of bids
          schema:
            items:
              $ref: '#/definitions/bid.RetrieveBidDTO'
            type: array
        "400":
          description: Invalid auction ID or retrieval error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get bids by auction ID
      tags:
      - bid
  /bid/bidder/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves all bids placed by a specific bidder
      parameters:
      - description: Bidder ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of bids
          schema:
            items:
              $ref: '#/definitions/bid.RetrieveBidDTO'
            type: array
        "400":
          description: Invalid bidder ID or retrieval error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get bids by bidder ID
      tags:
      - bid
  /bid/highest/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves the highest bid for a specific auction
      parameters:
      - description: Auction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Highest bid details
          schema:
            $ref: '#/definitions/bid.RetrieveBidDTO'
        "400":
          description: Invalid auction ID or retrieval error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get the highest bid for an auction
      tags:
      - bid
  /bid/highest/auction/{auctionId}/bidder/{bidderId}:
    get:
      consumes:
      - application/json
      description: Retrieves the highest bid placed by a specific user on a specific
        auction
      parameters:
      - description: Auction ID
        in: path
        name: auctionId
        required: true
        type: integer
      - description: Bidder ID
        in: path
        name: bidderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Highest bid details
          schema:
            $ref: '#/definitions/bid.RetrieveBidDTO'
        "400":
          description: Invalid auction ID, bidder ID, or retrieval error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get the highest bid by a user for a specific auction
      tags:
      - bid
  /car/colors:
    get:
      consumes:
      - application/json
      description: Returns a list of all possible colors that are accepted when creating
        a new offer. If the color of your car is not in the list, choose 'other'.
      produces:
      - application/json
      responses:
        "200":
          description: List of colors
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get all possible colors
      tags:
      - car
  /car/drives:
    get:
      consumes:
      - application/json
      description: Returns a list of all possible drives that are accepted when creating
        a new offer.
      produces:
      - application/json
      responses:
        "200":
          description: List of drives
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get all possible drives
      tags:
      - car
  /car/fuel-types:
    get:
      consumes:
      - application/json
      description: Returns a list of all possible fuel types that are accepted when
        creating a new offer.
      produces:
      - application/json
      responses:
        "200":
          description: List of fuel types
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get all possible fuel types
      tags:
      - car
  /car/manufacturer-model-map:
    get:
      consumes:
      - application/json
      description: Get manufacturers and models map. Each manufacturer has a list
        of models (the indices are corresponding).
      produces:
      - application/json
      responses:
        "200":
          description: map of manufacturers and models
          schema:
            $ref: '#/definitions/car.ManufacturerModelMap'
        "404":
          description: manufacturer of model not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get manufacturers and models map
      tags:
      - car
  /car/manufacturers:
    get:
      consumes:
      - application/json
      description: Returns a list of all manufacturers stored in the database.
      produces:
      - application/json
      responses:
        "200":
          description: List of manufacturers
          schema:
            items:
              $ref: '#/definitions/manufacturer.RetrieveManufacturerDTO'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get all manufacturers
      tags:
      - car
  /car/models/id/{id}:
    get:
      consumes:
      - application/json
      description: Returns a list of all models stored in the database for a given
        manufacturer id.
      parameters:
      - description: Manufacturer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of models
          schema:
            items:
              $ref: '#/definitions/model.RetrieveModelDTO'
            type: array
        "400":
          description: Id is not a number
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Models not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get all models by manufacturer id
      tags:
      - car
  /car/models/name/{name}:
    get:
      consumes:
      - application/json
      description: Returns a list of all models stored in the database for a given
        manufacturer name.
      parameters:
      - description: Manufacturer name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of models
          schema:
            items:
              $ref: '#/definitions/model.RetrieveModelDTO'
            type: array
        "404":
          description: Models not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get all models by manufacturer name
      tags:
      - car
  /car/transmissions:
    get:
      consumes:
      - application/json
      description: Returns a list of all possible transmissions that are accepted
        when creating a new offer.
      produces:
      - application/json
      responses:
        "200":
          description: List of transmissions
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get all possible transmissions
      tags:
      - car
  /favourites/dislike/{id}:
    delete:
      consumes:
      - application/json
      description: Dislike offer by giving it's id. You have to be logged in to perform
        this operation.
      parameters:
      - description: Sale offer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user not logged in
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Sale offer not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Dislike offer
      tags:
      - favourites
  /favourites/like/{id}:
    post:
      consumes:
      - application/json
      description: Like new offer by giving it's id. You have to be logged in to perform
        this operation.
      parameters:
      - description: Sale offer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Liked offer
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user not logged in
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Sale offer not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Like new offer
      tags:
      - favourites
  /image:
    delete:
      consumes:
      - application/json
      description: Deletes an image by its URL. The user must be the owner of the
        image. Removes image from database and cloud storage - both operations must
        be successful to proceed.
      parameters:
      - description: Image URL
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content - image successfully deleted
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user must be logged in to delete images
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "403":
          description: Forbidden - usercan only images that refer to his own offers
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Image not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete image
      tags:
      - image
  /image/{id}:
    patch:
      consumes:
      - multipart/form-data
      description: Uploads images for a sale offer. You can upload multiple images
        at once, but 10 is the limit. Only offers with photos can be published later
        on (sale-offer/publish).
      parameters:
      - description: Sale offer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Images to upload
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Updated sale offer with images
          schema:
            $ref: '#/definitions/sale_offer.RetrieveDetailedSaleOfferDTO'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user must be logged in to upload images for
            sale offers
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "403":
          description: Forbidden - user can only upload images for his own offers
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Sale offer not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Upload images for sale offer
      tags:
      - image
  /image/offer/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes all images for a sale offer. The user must be the owner
        of the given offer. Removes image from database and cloud storage - both operations
        must be successful to proceed.
      parameters:
      - description: Sale offer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content - images successfully deleted
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: 'Unauthorized - user must be logged in to delete images '
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "403":
          description: Forbidden - user can only delete images for his own offers
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Sale offer not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete all images for a sale offer
      tags:
      - image
  /logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate refresh token
      parameters:
      - description: Logout form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LogoutInput'
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Logout user
      tags:
      - auth
  /review:
    get:
      description: Returns every review in the system as an array of DTOs.
      operationId: getAllReviews
      produces:
      - application/json
      responses:
        "200":
          description: OK – list of reviews
          schema:
            items:
              $ref: '#/definitions/review.RetrieveReviewDTO'
            type: array
        "400":
          description: Bad Request – query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: List all reviews
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Persists a new review entity and returns the created review.
      operationId: createReview
      parameters:
      - description: Review payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/review.CreateReviewDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created – review stored
          schema:
            $ref: '#/definitions/review.RetrieveReviewDTO'
        "400":
          description: Bad Request – validation or persistence error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Create a new review
      tags:
      - reviews
    put:
      consumes:
      - application/json
      description: Updates a review and returns the updated entity.
      operationId: updateReview
      parameters:
      - description: Review payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/review.UpdateReviewDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK – review updated
          schema:
            $ref: '#/definitions/review.RetrieveReviewDTO'
        "400":
          description: Bad Request – validation or update error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Update an existing review
      tags:
      - reviews
  /review/{id}:
    delete:
      description: Deletes the review identified by its ID.
      operationId: deleteReview
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content – review deleted
          schema:
            type: string
        "400":
          description: Bad Request – invalid ID format or delete failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Delete a review
      tags:
      - reviews
    get:
      description: Returns review that match given id as an DTO.
      operationId: getReviewById
      parameters:
      - description: Review id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK – review with given id
          schema:
            $ref: '#/definitions/review.RetrieveReviewDTO'
        "400":
          description: Bad Request – query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get review by id
      tags:
      - reviews
  /review/{id}/average:
    get:
      description: Returns the average rating value calculated over all reviews for
        the given reviewee.
      operationId: getAverageRatingByRevieweeId
      parameters:
      - description: Reviewee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK – average rating (rounded to two decimals)
          schema:
            type: number
        "400":
          description: Bad Request – invalid ID format or query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get average rating for a reviewee
      tags:
      - reviews
  /review/{id}/frequency:
    get:
      description: Returns a map from rating value (1–5) to percentage frequency among
        all reviews for the given reviewee.
      operationId: getFrequencyOfRatingByRevieweeId
      parameters:
      - description: Reviewee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK – percentage frequencies for ratings 1 through 5
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request – invalid ID format or query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get distribution of ratings for a reviewee
      tags:
      - reviews
  /review/filter:
    post:
      consumes:
      - application/json
      description: Returns reviews matching podanych kryteriów filtrowania wraz z
        paginacją.
      operationId: getFilteredReviews
      parameters:
      - description: Filter payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/review.ReviewFilter'
      produces:
      - application/json
      responses:
        "200":
          description: 'OK '
          schema:
            $ref: '#/definitions/review.RetrieveReviewsWithPagination'
        "400":
          description: Bad Request – invalid filter or query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Filter reviews with pagination
      tags:
      - reviews
  /review/reviewee/{id}:
    post:
      description: Returns all reviews where the given user is the reviewee.
      operationId: getReviewsByRevieweeId
      parameters:
      - description: Reviewee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK – list of reviews
          schema:
            items:
              $ref: '#/definitions/review.RetrieveReviewDTO'
            type: array
        "400":
          description: Bad Request – invalid ID format or query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: List reviews about a reviewee
      tags:
      - reviews
  /review/reviewer/{id}:
    post:
      description: Returns all reviews authored by the reviewer specified by ID.
      operationId: getReviewsByReviewerId
      parameters:
      - description: Reviewer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK – list of reviews
          schema:
            items:
              $ref: '#/definitions/review.RetrieveReviewDTO'
            type: array
        "400":
          description: Bad Request – invalid ID format or query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: List reviews written by a reviewer
      tags:
      - reviews
  /review/reviewer/{reviewerId}/reviewee/{revieweeId}:
    get:
      description: Returns the review where <reviewerId> is the author and <revieweeId>
        is the subject.
      operationId: getReviewByReviewerAndReviewee
      parameters:
      - description: Reviewer ID
        in: path
        name: reviewerId
        required: true
        type: integer
      - description: Reviewee ID
        in: path
        name: revieweeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK – review found
          schema:
            $ref: '#/definitions/review.RetrieveReviewDTO'
        "400":
          description: Bad Request – invalid ID format or query failed
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get review written by one user about another
      tags:
      - reviews
  /sale-offer:
    post:
      consumes:
      - application/json
      description: |-
        Creates a new sale offer in the database. To create a sale offer, the user must be logged in. There are several constraints on the offer fields, such as:
        - Color must be one of the predefined colors (endpoint: /car/colors)
        - Fuel type must be one of the predefined fuel types (endpoint: /car/fuel_types)
        - Transmission must be one of the predefined transmission types (endpoint: /car/transmissions)
        - Drive must be one of the predefined drive types (endpoint: /car/drives)
        - Model must be one of the predefined models (endpoint: /car/models or /car/models/:id)
        - Number of doors must be between 1 and 6
        - Number of seats must be between 2 and 100
        - Engine power must be less than or equal to 9999 (in horsepower)
        - Engine capacity must be less than or equal to 9000 (in cm3)
        - Number of gears must be between 1 and 10
      parameters:
      - description: Sale offer form
        in: body
        name: offer
        required: true
        schema:
          $ref: '#/definitions/sale_offer.CreateSaleOfferDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created - returns the created sale offer
          schema:
            $ref: '#/definitions/sale_offer.RetrieveDetailedSaleOfferDTO'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user not logged in
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Create a new sale offer
      tags:
      - sale-offer
    put:
      consumes:
      - application/json
      description: Updates an existing sale offer in the database. To update a sale
        offer, the user must be logged in and must be the owner of the offer. Constraints
        are the same as when creating a sale offer.
      parameters:
      - description: Sale offer form
        in: body
        name: offer
        required: true
        schema:
          $ref: '#/definitions/sale_offer.UpdateSaleOfferDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Updated - returns the updated sale offer
          schema:
            $ref: '#/definitions/sale_offer.RetrieveDetailedSaleOfferDTO'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user must be logged in to update his offer
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "403":
          description: Forbidden - user can only update his own offer
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Sale offer not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Update a sale offer
      tags:
      - sale-offer
  /sale-offer/buy/{id}:
    delete:
      consumes:
      - application/json
      description: Allows a user to buy an item from a sale offer
      parameters:
      - description: Sale Offer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully purchased offer
        "401":
          description: Unauthorized - user must be logged in to buy an offer
        "403":
          description: Forbidden - user cannot buy his own offer
        "404":
          description: Not Found - sale offer not found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Buy a sale offer
      tags:
      - SaleOffers
  /sale-offer/filtered:
    post:
      consumes:
      - application/json
      description: |-
        Returns a list of sale offers in paginated form. If the user is logged in, the results contain he offers created by the user. The results are filtered based on request's body. There are several constraints on the filter fields, such as:
        - Auction type must be one of the predefined offer types (endpoint: /sale-offer/offer-types)
        - Order key must be one of the predefined order keys (endpoint: /sale-offer/order-keys)
        - List of manufacturers must contain only predefined manufacturers (endpoint: /car/manufacturers)
        - List of colors must contain only predefined colors (endpoint: /car/colors)
        - List of drives must contain only predefined drives (endpoint: /car/drives)
        - List of fuel types must contain only predefined fuel types (endpoint: /car/fuel_types)
        - List of transmissions must contain only predefined transmission types (endpoint: /car/transmissions)
        - Whenever you use a range, the min value must be less than or equal to the max value, you can provide only one of them, and the other will be ignored.
      parameters:
      - description: Sale offer filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/sale_offer.OfferFilter'
      produces:
      - application/json
      responses:
        "200":
          description: List of sale offers
          schema:
            $ref: '#/definitions/sale_offer.RetrieveOffersWithPagination'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get filtered sale offers
      tags:
      - sale-offer
  /sale-offer/id/{id}:
    get:
      consumes:
      - application/json
      description: Returns a sale offer by its ID. Can be used to retrieve detailed
        information about sale offer.
      parameters:
      - description: Sale offer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sale offer details
          schema:
            $ref: '#/definitions/sale_offer.RetrieveDetailedSaleOfferDTO'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: Sale offer not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get sale offer by ID
      tags:
      - sale-offer
  /sale-offer/my-offers:
    post:
      consumes:
      - application/json
      description: Returns a list of all sale offers created by the logged-in user.
      parameters:
      - description: Pagination request
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/pagination.PaginationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: List of sale offers
          schema:
            $ref: '#/definitions/sale_offer.RetrieveOffersWithPagination'
        "401":
          description: Unauthorized - user must be logged in to retrieve his offers
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Get my sale offers
      tags:
      - sale-offer
  /sale-offer/offer-types:
    get:
      consumes:
      - application/json
      description: Returns a list of all possible offer types that are accepted when
        using filtering. If you choose both the auctions and regular offers will be
        found.
      produces:
      - application/json
      responses:
        "200":
          description: List of offer types
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get offer types
      tags:
      - sale-offer
  /sale-offer/order-keys:
    get:
      consumes:
      - application/json
      description: Returns a list of all possible order keys that are accepted when
        using filtering.
      produces:
      - application/json
      responses:
        "200":
          description: List of order keys
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get order keys
      tags:
      - sale-offer
  /users:
    get:
      consumes:
      - application/json
      description: Return a list of all users stored in database. If user's subtype
        is person the company related fields will be omitted and vice versa.
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/user.RetrieveUserDTO'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates user's data in database from given form. Currently, you
        can only change basic fields (email, username, password), not the subtype.
      parameters:
      - description: Update form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/user.UpdateUserDTO'
        "400":
          description: Invalid input data - email, username or nip taken
          schema:
            $ref: '#/definitions/user.UpdateResponse'
        "401":
          description: Unauthorized - user be logged in to update his data
          schema:
            $ref: '#/definitions/user.UpdateResponse'
        "403":
          description: Forbidden - user can only update his own data
          schema:
            $ref: '#/definitions/user.UpdateResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/user.UpdateResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.UpdateResponse'
      security:
      - Bearer: []
      summary: Update user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Removes user who has provided id from database.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User successfully deleted
        "400":
          description: ID is not a number
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized - user must be logged in to delete his account
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "403":
          description: Forbidden - user can only delete his own account
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Returns user who has provided email. If user's subtype is person
        the company related fields will be omitted and vice versa.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/user.RetrieveUserDTO'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get user by email
      tags:
      - users
  /users/id/{id}:
    get:
      consumes:
      - application/json
      description: Returns user who has provided id. If user's subtype is person the
        company related fields will be omitted and vice versa.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/user.RetrieveUserDTO'
        "400":
          description: ID is not a number
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get user by id
      tags:
      - users
schemes:
- http
swagger: "2.0"
