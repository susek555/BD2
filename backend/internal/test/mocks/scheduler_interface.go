// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SchedulerInterface is an autogenerated mock type for the SchedulerInterface type
type SchedulerInterface struct {
	mock.Mock
}

type SchedulerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SchedulerInterface) EXPECT() *SchedulerInterface_Expecter {
	return &SchedulerInterface_Expecter{mock: &_m.Mock}
}

// AddAuction provides a mock function with given fields: auctionID, end
func (_m *SchedulerInterface) AddAuction(auctionID string, end time.Time) {
	_m.Called(auctionID, end)
}

// SchedulerInterface_AddAuction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAuction'
type SchedulerInterface_AddAuction_Call struct {
	*mock.Call
}

// AddAuction is a helper method to define mock.On call
//   - auctionID string
//   - end time.Time
func (_e *SchedulerInterface_Expecter) AddAuction(auctionID interface{}, end interface{}) *SchedulerInterface_AddAuction_Call {
	return &SchedulerInterface_AddAuction_Call{Call: _e.mock.On("AddAuction", auctionID, end)}
}

func (_c *SchedulerInterface_AddAuction_Call) Run(run func(auctionID string, end time.Time)) *SchedulerInterface_AddAuction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *SchedulerInterface_AddAuction_Call) Return() *SchedulerInterface_AddAuction_Call {
	_c.Call.Return()
	return _c
}

func (_c *SchedulerInterface_AddAuction_Call) RunAndReturn(run func(string, time.Time)) *SchedulerInterface_AddAuction_Call {
	_c.Run(run)
	return _c
}

// CloseAuction provides a mock function with given fields: auctionID
func (_m *SchedulerInterface) CloseAuction(auctionID string) {
	_m.Called(auctionID)
}

// SchedulerInterface_CloseAuction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAuction'
type SchedulerInterface_CloseAuction_Call struct {
	*mock.Call
}

// CloseAuction is a helper method to define mock.On call
//   - auctionID string
func (_e *SchedulerInterface_Expecter) CloseAuction(auctionID interface{}) *SchedulerInterface_CloseAuction_Call {
	return &SchedulerInterface_CloseAuction_Call{Call: _e.mock.On("CloseAuction", auctionID)}
}

func (_c *SchedulerInterface_CloseAuction_Call) Run(run func(auctionID string)) *SchedulerInterface_CloseAuction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SchedulerInterface_CloseAuction_Call) Return() *SchedulerInterface_CloseAuction_Call {
	_c.Call.Return()
	return _c
}

func (_c *SchedulerInterface_CloseAuction_Call) RunAndReturn(run func(string)) *SchedulerInterface_CloseAuction_Call {
	_c.Run(run)
	return _c
}

// ForceCloseAuction provides a mock function with given fields: auctionID
func (_m *SchedulerInterface) ForceCloseAuction(auctionID string) {
	_m.Called(auctionID)
}

// SchedulerInterface_ForceCloseAuction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceCloseAuction'
type SchedulerInterface_ForceCloseAuction_Call struct {
	*mock.Call
}

// ForceCloseAuction is a helper method to define mock.On call
//   - auctionID string
func (_e *SchedulerInterface_Expecter) ForceCloseAuction(auctionID interface{}) *SchedulerInterface_ForceCloseAuction_Call {
	return &SchedulerInterface_ForceCloseAuction_Call{Call: _e.mock.On("ForceCloseAuction", auctionID)}
}

func (_c *SchedulerInterface_ForceCloseAuction_Call) Run(run func(auctionID string)) *SchedulerInterface_ForceCloseAuction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SchedulerInterface_ForceCloseAuction_Call) Return() *SchedulerInterface_ForceCloseAuction_Call {
	_c.Call.Return()
	return _c
}

func (_c *SchedulerInterface_ForceCloseAuction_Call) RunAndReturn(run func(string)) *SchedulerInterface_ForceCloseAuction_Call {
	_c.Run(run)
	return _c
}

// LoadAuctions provides a mock function with no fields
func (_m *SchedulerInterface) LoadAuctions() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadAuctions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchedulerInterface_LoadAuctions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAuctions'
type SchedulerInterface_LoadAuctions_Call struct {
	*mock.Call
}

// LoadAuctions is a helper method to define mock.On call
func (_e *SchedulerInterface_Expecter) LoadAuctions() *SchedulerInterface_LoadAuctions_Call {
	return &SchedulerInterface_LoadAuctions_Call{Call: _e.mock.On("LoadAuctions")}
}

func (_c *SchedulerInterface_LoadAuctions_Call) Run(run func()) *SchedulerInterface_LoadAuctions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SchedulerInterface_LoadAuctions_Call) Return(_a0 error) *SchedulerInterface_LoadAuctions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchedulerInterface_LoadAuctions_Call) RunAndReturn(run func() error) *SchedulerInterface_LoadAuctions_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *SchedulerInterface) Run(ctx context.Context) {
	_m.Called(ctx)
}

// SchedulerInterface_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type SchedulerInterface_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SchedulerInterface_Expecter) Run(ctx interface{}) *SchedulerInterface_Run_Call {
	return &SchedulerInterface_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *SchedulerInterface_Run_Call) Run(run func(ctx context.Context)) *SchedulerInterface_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SchedulerInterface_Run_Call) Return() *SchedulerInterface_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *SchedulerInterface_Run_Call) RunAndReturn(run func(context.Context)) *SchedulerInterface_Run_Call {
	_c.Run(run)
	return _c
}

// NewSchedulerInterface creates a new instance of SchedulerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchedulerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchedulerInterface {
	mock := &SchedulerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
