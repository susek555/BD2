definitions:
  auth.LoginInput:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  auth.LoginResponse:
    properties:
      access_token:
        type: string
      company_name:
        type: string
      company_nip:
        type: string
      email:
        type: string
      errors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      person_name:
        type: string
      person_surname:
        type: string
      refresh_token:
        type: string
      selector:
        type: string
      username:
        type: string
    type: object
  auth.LogoutInput:
    properties:
      all_devices:
        type: boolean
      refresh_token:
        type: string
    type: object
  auth.RefreshInput:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterResponse:
    properties:
      errors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  custom_errors.HTTPError:
    properties:
      error_description:
        type: string
    type: object
  user.CreateUserDTO:
    properties:
      company_name:
        type: string
      company_nip:
        type: string
      email:
        type: string
      password:
        type: string
      person_name:
        type: string
      person_surname:
        type: string
      selector:
        type: string
      username:
        type: string
    required:
    - email
    type: object
  user.RetrieveUserDTO:
    properties:
      company_name:
        type: string
      company_nip:
        type: string
      email:
        type: string
      person_name:
        type: string
      person_surname:
        type: string
      username:
        type: string
    type: object
  user.UpdateUserDTO:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: BD2
  description: Car-Dealer API
  license:
    name: MIT
  title: Carâ€‘Dealer API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a pair of tokens and user data
      parameters:
      - description: Login form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - returns tokens and data of the user
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.LoginResponse'
      summary: Login user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access tokens
      parameters:
      - description: Refresh token form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - returns new access token
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Refresh tokens
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Set up account and return the status
      parameters:
      - description: Registration form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created - returns tokens
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "409":
          description: Login taken
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
      summary: Register new user
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate refresh token
      parameters:
      - description: Logout form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LogoutInput'
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Logout user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get all users from database and return them as a list of DTOs.
        If user's subtype is person the company related fields will be omitted and
        vice versa.
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/user.RetrieveUserDTO'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user in database from DTO. Currently you can only change
        basic fields (email, username, password), not the subtype.
      parameters:
      - description: Update form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/user.UpdateUserDTO'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Update user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user from database by id.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User sucessfully deleted
        "400":
          description: Id is not a number
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Delete user
      tags:
      - users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Get user by email from database and return it as a DTO. If user's
        subtype is person the company related fields will be omitted and vice versa.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/user.RetrieveUserDTO'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get user by email
      tags:
      - users
  /users/id/{id}:
    get:
      consumes:
      - application/json
      description: Get user by id from database and return it as a DTO. If user's
        subtype is person the company related fields will be omitted and vice versa.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/user.RetrieveUserDTO'
        "400":
          description: Id is not a number
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/custom_errors.HTTPError'
      summary: Get user by id
      tags:
      - users
schemes:
- http
swagger: "2.0"
