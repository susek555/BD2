// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/susek555/BD2/car-dealer-api/internal/domains/models"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

type UserRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepositoryInterface) EXPECT() *UserRepositoryInterface_Expecter {
	return &UserRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: entity
func (_m *UserRepositoryInterface) Create(entity *models.User) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - entity *models.User
func (_e *UserRepositoryInterface_Expecter) Create(entity interface{}) *UserRepositoryInterface_Create_Call {
	return &UserRepositoryInterface_Create_Call{Call: _e.mock.On("Create", entity)}
}

func (_c *UserRepositoryInterface_Create_Call) Run(run func(entity *models.User)) *UserRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepositoryInterface_Create_Call) Return(_a0 error) *UserRepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepositoryInterface_Create_Call) RunAndReturn(run func(*models.User) error) *UserRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *UserRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *UserRepositoryInterface_Expecter) Delete(id interface{}) *UserRepositoryInterface_Delete_Call {
	return &UserRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *UserRepositoryInterface_Delete_Call) Run(run func(id uint)) *UserRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserRepositoryInterface_Delete_Call) Return(_a0 error) *UserRepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepositoryInterface_Delete_Call) RunAndReturn(run func(uint) error) *UserRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *UserRepositoryInterface) GetAll() ([]models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *UserRepositoryInterface_Expecter) GetAll() *UserRepositoryInterface_GetAll_Call {
	return &UserRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *UserRepositoryInterface_GetAll_Call) Run(run func()) *UserRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepositoryInterface_GetAll_Call) Return(_a0 []models.User, _a1 error) *UserRepositoryInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_GetAll_Call) RunAndReturn(run func() ([]models.User, error)) *UserRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCompanyNip provides a mock function with given fields: nip
func (_m *UserRepositoryInterface) GetByCompanyNip(nip string) (models.User, error) {
	ret := _m.Called(nip)

	if len(ret) == 0 {
		panic("no return value specified for GetByCompanyNip")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(nip)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(nip)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_GetByCompanyNip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCompanyNip'
type UserRepositoryInterface_GetByCompanyNip_Call struct {
	*mock.Call
}

// GetByCompanyNip is a helper method to define mock.On call
//   - nip string
func (_e *UserRepositoryInterface_Expecter) GetByCompanyNip(nip interface{}) *UserRepositoryInterface_GetByCompanyNip_Call {
	return &UserRepositoryInterface_GetByCompanyNip_Call{Call: _e.mock.On("GetByCompanyNip", nip)}
}

func (_c *UserRepositoryInterface_GetByCompanyNip_Call) Run(run func(nip string)) *UserRepositoryInterface_GetByCompanyNip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepositoryInterface_GetByCompanyNip_Call) Return(_a0 models.User, _a1 error) *UserRepositoryInterface_GetByCompanyNip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_GetByCompanyNip_Call) RunAndReturn(run func(string) (models.User, error)) *UserRepositoryInterface_GetByCompanyNip_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepositoryInterface) GetByEmail(email string) (models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepositoryInterface_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *UserRepositoryInterface_Expecter) GetByEmail(email interface{}) *UserRepositoryInterface_GetByEmail_Call {
	return &UserRepositoryInterface_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *UserRepositoryInterface_GetByEmail_Call) Run(run func(email string)) *UserRepositoryInterface_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepositoryInterface_GetByEmail_Call) Return(_a0 models.User, _a1 error) *UserRepositoryInterface_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_GetByEmail_Call) RunAndReturn(run func(string) (models.User, error)) *UserRepositoryInterface_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *UserRepositoryInterface) GetById(id uint) (*models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type UserRepositoryInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id uint
func (_e *UserRepositoryInterface_Expecter) GetById(id interface{}) *UserRepositoryInterface_GetById_Call {
	return &UserRepositoryInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *UserRepositoryInterface_GetById_Call) Run(run func(id uint)) *UserRepositoryInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserRepositoryInterface_GetById_Call) Return(_a0 *models.User, _a1 error) *UserRepositoryInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_GetById_Call) RunAndReturn(run func(uint) (*models.User, error)) *UserRepositoryInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: username
func (_m *UserRepositoryInterface) GetByUsername(username string) (models.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type UserRepositoryInterface_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - username string
func (_e *UserRepositoryInterface_Expecter) GetByUsername(username interface{}) *UserRepositoryInterface_GetByUsername_Call {
	return &UserRepositoryInterface_GetByUsername_Call{Call: _e.mock.On("GetByUsername", username)}
}

func (_c *UserRepositoryInterface_GetByUsername_Call) Run(run func(username string)) *UserRepositoryInterface_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepositoryInterface_GetByUsername_Call) Return(_a0 models.User, _a1 error) *UserRepositoryInterface_GetByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_GetByUsername_Call) RunAndReturn(run func(string) (models.User, error)) *UserRepositoryInterface_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: entity
func (_m *UserRepositoryInterface) Update(entity *models.User) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - entity *models.User
func (_e *UserRepositoryInterface_Expecter) Update(entity interface{}) *UserRepositoryInterface_Update_Call {
	return &UserRepositoryInterface_Update_Call{Call: _e.mock.On("Update", entity)}
}

func (_c *UserRepositoryInterface_Update_Call) Run(run func(entity *models.User)) *UserRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepositoryInterface_Update_Call) Return(_a0 error) *UserRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepositoryInterface_Update_Call) RunAndReturn(run func(*models.User) error) *UserRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
