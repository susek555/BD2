// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/susek555/BD2/car-dealer-api/internal/models"
)

// AuctionRepositoryInterface is an autogenerated mock type for the AuctionRepositoryInterface type
type AuctionRepositoryInterface struct {
	mock.Mock
}

type AuctionRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuctionRepositoryInterface) EXPECT() *AuctionRepositoryInterface_Expecter {
	return &AuctionRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: entity
func (_m *AuctionRepositoryInterface) Create(entity *models.Auction) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Auction) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuctionRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuctionRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - entity *models.Auction
func (_e *AuctionRepositoryInterface_Expecter) Create(entity interface{}) *AuctionRepositoryInterface_Create_Call {
	return &AuctionRepositoryInterface_Create_Call{Call: _e.mock.On("Create", entity)}
}

func (_c *AuctionRepositoryInterface_Create_Call) Run(run func(entity *models.Auction)) *AuctionRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Auction))
	})
	return _c
}

func (_c *AuctionRepositoryInterface_Create_Call) Return(_a0 error) *AuctionRepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuctionRepositoryInterface_Create_Call) RunAndReturn(run func(*models.Auction) error) *AuctionRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *AuctionRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuctionRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AuctionRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *AuctionRepositoryInterface_Expecter) Delete(id interface{}) *AuctionRepositoryInterface_Delete_Call {
	return &AuctionRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *AuctionRepositoryInterface_Delete_Call) Run(run func(id uint)) *AuctionRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *AuctionRepositoryInterface_Delete_Call) Return(_a0 error) *AuctionRepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuctionRepositoryInterface_Delete_Call) RunAndReturn(run func(uint) error) *AuctionRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *AuctionRepositoryInterface) GetAll() ([]models.Auction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Auction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Auction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuctionRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type AuctionRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *AuctionRepositoryInterface_Expecter) GetAll() *AuctionRepositoryInterface_GetAll_Call {
	return &AuctionRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *AuctionRepositoryInterface_GetAll_Call) Run(run func()) *AuctionRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuctionRepositoryInterface_GetAll_Call) Return(_a0 []models.Auction, _a1 error) *AuctionRepositoryInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuctionRepositoryInterface_GetAll_Call) RunAndReturn(run func() ([]models.Auction, error)) *AuctionRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *AuctionRepositoryInterface) GetById(id uint) (*models.Auction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Auction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Auction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuctionRepositoryInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type AuctionRepositoryInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id uint
func (_e *AuctionRepositoryInterface_Expecter) GetById(id interface{}) *AuctionRepositoryInterface_GetById_Call {
	return &AuctionRepositoryInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *AuctionRepositoryInterface_GetById_Call) Run(run func(id uint)) *AuctionRepositoryInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *AuctionRepositoryInterface_GetById_Call) Return(_a0 *models.Auction, _a1 error) *AuctionRepositoryInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuctionRepositoryInterface_GetById_Call) RunAndReturn(run func(uint) (*models.Auction, error)) *AuctionRepositoryInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: entity
func (_m *AuctionRepositoryInterface) Update(entity *models.Auction) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Auction) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuctionRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AuctionRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - entity *models.Auction
func (_e *AuctionRepositoryInterface_Expecter) Update(entity interface{}) *AuctionRepositoryInterface_Update_Call {
	return &AuctionRepositoryInterface_Update_Call{Call: _e.mock.On("Update", entity)}
}

func (_c *AuctionRepositoryInterface_Update_Call) Run(run func(entity *models.Auction)) *AuctionRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Auction))
	})
	return _c
}

func (_c *AuctionRepositoryInterface_Update_Call) Return(_a0 error) *AuctionRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuctionRepositoryInterface_Update_Call) RunAndReturn(run func(*models.Auction) error) *AuctionRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuctionRepositoryInterface creates a new instance of AuctionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuctionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuctionRepositoryInterface {
	mock := &AuctionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
