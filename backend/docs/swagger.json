{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Car-Dealer API",
        "title": "Carâ€‘Dealer API",
        "contact": {
            "name": "BD2"
        },
        "license": {
            "name": "MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return a pair of tokens and user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - returns tokens and data of the user",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh access tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - returns new access token",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Set up account and return the status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - returns tokens",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    },
                    "409": {
                        "description": "Login taken",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    }
                }
            }
        },
        "/cars/colors": {
            "get": {
                "description": "Returns a list of all possible colors that are accepted when creating a new offer. If color of your car is not in the list, chose 'other'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all possible colors",
                "responses": {
                    "200": {
                        "description": "List of colors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cars/drives": {
            "get": {
                "description": "Returns a list of all possible drives that are accepted when creating a new offer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all possible drives",
                "responses": {
                    "200": {
                        "description": "List of drives",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cars/fuel-types": {
            "get": {
                "description": "Returns a list of all possible fuel types that are accepted when creating a new offer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all possible fuel types",
                "responses": {
                    "200": {
                        "description": "List of fuel types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cars/manufacturers": {
            "get": {
                "description": "Returns a list of all manufacturers stored in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all manufacturers",
                "responses": {
                    "200": {
                        "description": "List of manufacturers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/manufacturer.Manufacturer"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/cars/models/id/{id}": {
            "get": {
                "description": "Returns a list of all models stored in the database for a given manufacturer id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all models by manufacturer id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Manufacturer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of models",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RetrieveModelDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Id is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Models not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/cars/models/name/{name}": {
            "get": {
                "description": "Returns a list of all models stored in the database for a given manufacturer name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all models by manufacturer name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturer name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of models",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RetrieveModelDTO"
                            }
                        }
                    },
                    "404": {
                        "description": "Models not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/cars/transmissions": {
            "get": {
                "description": "Returns a list of all possible transmissions that are accepted when creating a new offer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get all possible transmissions",
                "responses": {
                    "200": {
                        "description": "List of transmissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Logout user and invalidate refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Logout form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LogoutInput"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review": {
            "get": {
                "description": "Returns every review in the system as an array of DTOs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "List all reviews",
                "operationId": "getAllReviews",
                "responses": {
                    "200": {
                        "description": "OK â€“ list of reviews",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/review.ReviewOutput"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a review and returns the updated entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Update an existing review",
                "operationId": "updateReview",
                "parameters": [
                    {
                        "description": "Review payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/review.ReviewInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ review updated",
                        "schema": {
                            "$ref": "#/definitions/review.ReviewOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ validation or update error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Persists a new review entity and returns the created review.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Create a new review",
                "operationId": "createReview",
                "parameters": [
                    {
                        "description": "Review payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/review.ReviewInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created â€“ review stored",
                        "schema": {
                            "$ref": "#/definitions/review.ReviewOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ validation or persistence error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/reviewee/{id}": {
            "get": {
                "description": "Returns all reviews where the given user is the reviewee.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "List reviews about a reviewee",
                "operationId": "getReviewsByRevieweeId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reviewee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ list of reviews",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/review.ReviewOutput"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/reviewer/{id}": {
            "get": {
                "description": "Returns all reviews authored by the reviewer specified by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "List reviews written by a reviewer",
                "operationId": "getReviewsByReviewerId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reviewer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ list of reviews",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/review.ReviewOutput"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/reviewer/{reviewerId}/reviewee/{revieweeId}": {
            "get": {
                "description": "Returns the review where \u003creviewerId\u003e is the author and \u003crevieweeId\u003e is the subject.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get review written by one user about another",
                "operationId": "getReviewByReviewerAndReviewee",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reviewer ID",
                        "name": "reviewerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Reviewee ID",
                        "name": "revieweeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ review found",
                        "schema": {
                            "$ref": "#/definitions/review.ReviewOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/review/{id}": {
            "get": {
                "description": "Returns review that match given id as an DTO.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get review by id",
                "operationId": "getReviewById",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK â€“ review with given id",
                        "schema": {
                            "$ref": "#/definitions/review.ReviewOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ query failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the review identified by its ID.",
                "tags": [
                    "reviews"
                ],
                "summary": "Delete a review",
                "operationId": "deleteReview",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content â€“ review deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request â€“ invalid ID format or delete failed",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Return a list of all users stored in database. If user's subtype is person the company related fields will be omitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.RetrieveUserDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates user's data in database from given form. Currently you can only change basic fields (email, username, password), not the subtype.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "Update form",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated",
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "description": "Returns user who has provided email. If user's subtype is person the company related fields will be omitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/user.RetrieveUserDTO"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/id/{id}": {
            "get": {
                "description": "Returns user who has provided id. If user's subtype is person the company related fields will be omitted and vice versa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/user.RetrieveUserDTO"
                        }
                    },
                    "400": {
                        "description": "Id is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Removes user who has provided id from database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User sucessfully deleted"
                    },
                    "400": {
                        "description": "Id is not a number",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/custom_errors.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginInput": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "selector": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.LogoutInput": {
            "type": "object",
            "properties": {
                "all_devices": {
                    "type": "boolean"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "auth.RefreshInput": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "custom_errors.HTTPError": {
            "type": "object",
            "properties": {
                "error_description": {
                    "type": "string"
                }
            }
        },
        "manufacturer.Manufacturer": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.RetrieveModelDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "review.ReviewInput": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "reviewee_id": {
                    "type": "integer"
                },
                "reviewer_id": {
                    "type": "integer"
                }
            }
        },
        "review.ReviewOutput": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "reviewee": {
                    "$ref": "#/definitions/review.UserDTO"
                },
                "reviewer": {
                    "$ref": "#/definitions/review.UserDTO"
                }
            }
        },
        "review.UserDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserDTO": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "selector": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.RetrieveUserDTO": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "company_nip": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "person_name": {
                    "type": "string"
                },
                "person_surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.UpdateUserDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}