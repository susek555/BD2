// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/susek555/BD2/car-dealer-api/internal/models"
	pagination "github.com/susek555/BD2/car-dealer-api/pkg/pagination"

	sale_offer "github.com/susek555/BD2/car-dealer-api/internal/domains/sale_offer"
)

// SaleOfferServiceInterface is an autogenerated mock type for the SaleOfferServiceInterface type
type SaleOfferServiceInterface struct {
	mock.Mock
}

type SaleOfferServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SaleOfferServiceInterface) EXPECT() *SaleOfferServiceInterface_Expecter {
	return &SaleOfferServiceInterface_Expecter{mock: &_m.Mock}
}

// Buy provides a mock function with given fields: offerID, userID
func (_m *SaleOfferServiceInterface) Buy(offerID uint, userID uint) (*models.SaleOffer, error) {
	ret := _m.Called(offerID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Buy")
	}

	var r0 *models.SaleOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*models.SaleOffer, error)); ok {
		return rf(offerID, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *models.SaleOffer); ok {
		r0 = rf(offerID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SaleOffer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(offerID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_Buy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Buy'
type SaleOfferServiceInterface_Buy_Call struct {
	*mock.Call
}

// Buy is a helper method to define mock.On call
//   - offerID uint
//   - userID uint
func (_e *SaleOfferServiceInterface_Expecter) Buy(offerID interface{}, userID interface{}) *SaleOfferServiceInterface_Buy_Call {
	return &SaleOfferServiceInterface_Buy_Call{Call: _e.mock.On("Buy", offerID, userID)}
}

func (_c *SaleOfferServiceInterface_Buy_Call) Run(run func(offerID uint, userID uint)) *SaleOfferServiceInterface_Buy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_Buy_Call) Return(_a0 *models.SaleOffer, _a1 error) *SaleOfferServiceInterface_Buy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_Buy_Call) RunAndReturn(run func(uint, uint) (*models.SaleOffer, error)) *SaleOfferServiceInterface_Buy_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: in
func (_m *SaleOfferServiceInterface) Create(in *sale_offer.CreateSaleOfferDTO) (*sale_offer.RetrieveDetailedSaleOfferDTO, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sale_offer.RetrieveDetailedSaleOfferDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*sale_offer.CreateSaleOfferDTO) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*sale_offer.CreateSaleOfferDTO) *sale_offer.RetrieveDetailedSaleOfferDTO); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sale_offer.RetrieveDetailedSaleOfferDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*sale_offer.CreateSaleOfferDTO) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SaleOfferServiceInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - in *sale_offer.CreateSaleOfferDTO
func (_e *SaleOfferServiceInterface_Expecter) Create(in interface{}) *SaleOfferServiceInterface_Create_Call {
	return &SaleOfferServiceInterface_Create_Call{Call: _e.mock.On("Create", in)}
}

func (_c *SaleOfferServiceInterface_Create_Call) Run(run func(in *sale_offer.CreateSaleOfferDTO)) *SaleOfferServiceInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sale_offer.CreateSaleOfferDTO))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_Create_Call) Return(_a0 *sale_offer.RetrieveDetailedSaleOfferDTO, _a1 error) *SaleOfferServiceInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_Create_Call) RunAndReturn(run func(*sale_offer.CreateSaleOfferDTO) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)) *SaleOfferServiceInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DetermineNewModelID provides a mock function with given fields: offer, dto
func (_m *SaleOfferServiceInterface) DetermineNewModelID(offer *models.SaleOffer, dto *sale_offer.UpdateSaleOfferDTO) (uint, error) {
	ret := _m.Called(offer, dto)

	if len(ret) == 0 {
		panic("no return value specified for DetermineNewModelID")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.SaleOffer, *sale_offer.UpdateSaleOfferDTO) (uint, error)); ok {
		return rf(offer, dto)
	}
	if rf, ok := ret.Get(0).(func(*models.SaleOffer, *sale_offer.UpdateSaleOfferDTO) uint); ok {
		r0 = rf(offer, dto)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*models.SaleOffer, *sale_offer.UpdateSaleOfferDTO) error); ok {
		r1 = rf(offer, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_DetermineNewModelID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetermineNewModelID'
type SaleOfferServiceInterface_DetermineNewModelID_Call struct {
	*mock.Call
}

// DetermineNewModelID is a helper method to define mock.On call
//   - offer *models.SaleOffer
//   - dto *sale_offer.UpdateSaleOfferDTO
func (_e *SaleOfferServiceInterface_Expecter) DetermineNewModelID(offer interface{}, dto interface{}) *SaleOfferServiceInterface_DetermineNewModelID_Call {
	return &SaleOfferServiceInterface_DetermineNewModelID_Call{Call: _e.mock.On("DetermineNewModelID", offer, dto)}
}

func (_c *SaleOfferServiceInterface_DetermineNewModelID_Call) Run(run func(offer *models.SaleOffer, dto *sale_offer.UpdateSaleOfferDTO)) *SaleOfferServiceInterface_DetermineNewModelID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SaleOffer), args[1].(*sale_offer.UpdateSaleOfferDTO))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_DetermineNewModelID_Call) Return(_a0 uint, _a1 error) *SaleOfferServiceInterface_DetermineNewModelID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_DetermineNewModelID_Call) RunAndReturn(run func(*models.SaleOffer, *sale_offer.UpdateSaleOfferDTO) (uint, error)) *SaleOfferServiceInterface_DetermineNewModelID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id, userID
func (_m *SaleOfferServiceInterface) GetByID(id uint, userID *uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *sale_offer.RetrieveDetailedSaleOfferDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, *uint) *sale_offer.RetrieveDetailedSaleOfferDTO); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sale_offer.RetrieveDetailedSaleOfferDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type SaleOfferServiceInterface_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint
//   - userID *uint
func (_e *SaleOfferServiceInterface_Expecter) GetByID(id interface{}, userID interface{}) *SaleOfferServiceInterface_GetByID_Call {
	return &SaleOfferServiceInterface_GetByID_Call{Call: _e.mock.On("GetByID", id, userID)}
}

func (_c *SaleOfferServiceInterface_GetByID_Call) Run(run func(id uint, userID *uint)) *SaleOfferServiceInterface_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(*uint))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_GetByID_Call) Return(_a0 *sale_offer.RetrieveDetailedSaleOfferDTO, _a1 error) *SaleOfferServiceInterface_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_GetByID_Call) RunAndReturn(run func(uint, *uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)) *SaleOfferServiceInterface_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIdNonDTO provides a mock function with given fields: id, userID
func (_m *SaleOfferServiceInterface) GetByIdNonDTO(id uint, userID uint) (*models.SaleOffer, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdNonDTO")
	}

	var r0 *models.SaleOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*models.SaleOffer, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *models.SaleOffer); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SaleOffer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_GetByIdNonDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIdNonDTO'
type SaleOfferServiceInterface_GetByIdNonDTO_Call struct {
	*mock.Call
}

// GetByIdNonDTO is a helper method to define mock.On call
//   - id uint
//   - userID uint
func (_e *SaleOfferServiceInterface_Expecter) GetByIdNonDTO(id interface{}, userID interface{}) *SaleOfferServiceInterface_GetByIdNonDTO_Call {
	return &SaleOfferServiceInterface_GetByIdNonDTO_Call{Call: _e.mock.On("GetByIdNonDTO", id, userID)}
}

func (_c *SaleOfferServiceInterface_GetByIdNonDTO_Call) Run(run func(id uint, userID uint)) *SaleOfferServiceInterface_GetByIdNonDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_GetByIdNonDTO_Call) Return(_a0 *models.SaleOffer, _a1 error) *SaleOfferServiceInterface_GetByIdNonDTO_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_GetByIdNonDTO_Call) RunAndReturn(run func(uint, uint) (*models.SaleOffer, error)) *SaleOfferServiceInterface_GetByIdNonDTO_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: id, pagRequest
func (_m *SaleOfferServiceInterface) GetByUserID(id uint, pagRequest *pagination.PaginationRequest) (*sale_offer.RetrieveOffersWithPagination, error) {
	ret := _m.Called(id, pagRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *sale_offer.RetrieveOffersWithPagination
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *pagination.PaginationRequest) (*sale_offer.RetrieveOffersWithPagination, error)); ok {
		return rf(id, pagRequest)
	}
	if rf, ok := ret.Get(0).(func(uint, *pagination.PaginationRequest) *sale_offer.RetrieveOffersWithPagination); ok {
		r0 = rf(id, pagRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sale_offer.RetrieveOffersWithPagination)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *pagination.PaginationRequest) error); ok {
		r1 = rf(id, pagRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type SaleOfferServiceInterface_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - id uint
//   - pagRequest *pagination.PaginationRequest
func (_e *SaleOfferServiceInterface_Expecter) GetByUserID(id interface{}, pagRequest interface{}) *SaleOfferServiceInterface_GetByUserID_Call {
	return &SaleOfferServiceInterface_GetByUserID_Call{Call: _e.mock.On("GetByUserID", id, pagRequest)}
}

func (_c *SaleOfferServiceInterface_GetByUserID_Call) Run(run func(id uint, pagRequest *pagination.PaginationRequest)) *SaleOfferServiceInterface_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(*pagination.PaginationRequest))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_GetByUserID_Call) Return(_a0 *sale_offer.RetrieveOffersWithPagination, _a1 error) *SaleOfferServiceInterface_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_GetByUserID_Call) RunAndReturn(run func(uint, *pagination.PaginationRequest) (*sale_offer.RetrieveOffersWithPagination, error)) *SaleOfferServiceInterface_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFiltered provides a mock function with given fields: filter, pagRequest
func (_m *SaleOfferServiceInterface) GetFiltered(filter *sale_offer.OfferFilter, pagRequest *pagination.PaginationRequest) (*sale_offer.RetrieveOffersWithPagination, error) {
	ret := _m.Called(filter, pagRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetFiltered")
	}

	var r0 *sale_offer.RetrieveOffersWithPagination
	var r1 error
	if rf, ok := ret.Get(0).(func(*sale_offer.OfferFilter, *pagination.PaginationRequest) (*sale_offer.RetrieveOffersWithPagination, error)); ok {
		return rf(filter, pagRequest)
	}
	if rf, ok := ret.Get(0).(func(*sale_offer.OfferFilter, *pagination.PaginationRequest) *sale_offer.RetrieveOffersWithPagination); ok {
		r0 = rf(filter, pagRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sale_offer.RetrieveOffersWithPagination)
		}
	}

	if rf, ok := ret.Get(1).(func(*sale_offer.OfferFilter, *pagination.PaginationRequest) error); ok {
		r1 = rf(filter, pagRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_GetFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFiltered'
type SaleOfferServiceInterface_GetFiltered_Call struct {
	*mock.Call
}

// GetFiltered is a helper method to define mock.On call
//   - filter *sale_offer.OfferFilter
//   - pagRequest *pagination.PaginationRequest
func (_e *SaleOfferServiceInterface_Expecter) GetFiltered(filter interface{}, pagRequest interface{}) *SaleOfferServiceInterface_GetFiltered_Call {
	return &SaleOfferServiceInterface_GetFiltered_Call{Call: _e.mock.On("GetFiltered", filter, pagRequest)}
}

func (_c *SaleOfferServiceInterface_GetFiltered_Call) Run(run func(filter *sale_offer.OfferFilter, pagRequest *pagination.PaginationRequest)) *SaleOfferServiceInterface_GetFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sale_offer.OfferFilter), args[1].(*pagination.PaginationRequest))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_GetFiltered_Call) Return(_a0 *sale_offer.RetrieveOffersWithPagination, _a1 error) *SaleOfferServiceInterface_GetFiltered_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_GetFiltered_Call) RunAndReturn(run func(*sale_offer.OfferFilter, *pagination.PaginationRequest) (*sale_offer.RetrieveOffersWithPagination, error)) *SaleOfferServiceInterface_GetFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelID provides a mock function with given fields: manufacturerName, modelName
func (_m *SaleOfferServiceInterface) GetModelID(manufacturerName string, modelName string) (uint, error) {
	ret := _m.Called(manufacturerName, modelName)

	if len(ret) == 0 {
		panic("no return value specified for GetModelID")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (uint, error)); ok {
		return rf(manufacturerName, modelName)
	}
	if rf, ok := ret.Get(0).(func(string, string) uint); ok {
		r0 = rf(manufacturerName, modelName)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(manufacturerName, modelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_GetModelID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelID'
type SaleOfferServiceInterface_GetModelID_Call struct {
	*mock.Call
}

// GetModelID is a helper method to define mock.On call
//   - manufacturerName string
//   - modelName string
func (_e *SaleOfferServiceInterface_Expecter) GetModelID(manufacturerName interface{}, modelName interface{}) *SaleOfferServiceInterface_GetModelID_Call {
	return &SaleOfferServiceInterface_GetModelID_Call{Call: _e.mock.On("GetModelID", manufacturerName, modelName)}
}

func (_c *SaleOfferServiceInterface_GetModelID_Call) Run(run func(manufacturerName string, modelName string)) *SaleOfferServiceInterface_GetModelID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_GetModelID_Call) Return(_a0 uint, _a1 error) *SaleOfferServiceInterface_GetModelID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_GetModelID_Call) RunAndReturn(run func(string, string) (uint, error)) *SaleOfferServiceInterface_GetModelID_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: id, userID
func (_m *SaleOfferServiceInterface) Publish(id uint, userID uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *sale_offer.RetrieveDetailedSaleOfferDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *sale_offer.RetrieveDetailedSaleOfferDTO); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sale_offer.RetrieveDetailedSaleOfferDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type SaleOfferServiceInterface_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - id uint
//   - userID uint
func (_e *SaleOfferServiceInterface_Expecter) Publish(id interface{}, userID interface{}) *SaleOfferServiceInterface_Publish_Call {
	return &SaleOfferServiceInterface_Publish_Call{Call: _e.mock.On("Publish", id, userID)}
}

func (_c *SaleOfferServiceInterface_Publish_Call) Run(run func(id uint, userID uint)) *SaleOfferServiceInterface_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_Publish_Call) Return(_a0 *sale_offer.RetrieveDetailedSaleOfferDTO, _a1 error) *SaleOfferServiceInterface_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_Publish_Call) RunAndReturn(run func(uint, uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)) *SaleOfferServiceInterface_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: in, userID
func (_m *SaleOfferServiceInterface) Update(in *sale_offer.UpdateSaleOfferDTO, userID uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error) {
	ret := _m.Called(in, userID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sale_offer.RetrieveDetailedSaleOfferDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*sale_offer.UpdateSaleOfferDTO, uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)); ok {
		return rf(in, userID)
	}
	if rf, ok := ret.Get(0).(func(*sale_offer.UpdateSaleOfferDTO, uint) *sale_offer.RetrieveDetailedSaleOfferDTO); ok {
		r0 = rf(in, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sale_offer.RetrieveDetailedSaleOfferDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*sale_offer.UpdateSaleOfferDTO, uint) error); ok {
		r1 = rf(in, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleOfferServiceInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type SaleOfferServiceInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - in *sale_offer.UpdateSaleOfferDTO
//   - userID uint
func (_e *SaleOfferServiceInterface_Expecter) Update(in interface{}, userID interface{}) *SaleOfferServiceInterface_Update_Call {
	return &SaleOfferServiceInterface_Update_Call{Call: _e.mock.On("Update", in, userID)}
}

func (_c *SaleOfferServiceInterface_Update_Call) Run(run func(in *sale_offer.UpdateSaleOfferDTO, userID uint)) *SaleOfferServiceInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sale_offer.UpdateSaleOfferDTO), args[1].(uint))
	})
	return _c
}

func (_c *SaleOfferServiceInterface_Update_Call) Return(_a0 *sale_offer.RetrieveDetailedSaleOfferDTO, _a1 error) *SaleOfferServiceInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SaleOfferServiceInterface_Update_Call) RunAndReturn(run func(*sale_offer.UpdateSaleOfferDTO, uint) (*sale_offer.RetrieveDetailedSaleOfferDTO, error)) *SaleOfferServiceInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewSaleOfferServiceInterface creates a new instance of SaleOfferServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSaleOfferServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SaleOfferServiceInterface {
	mock := &SaleOfferServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
