// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	notification "github.com/susek555/BD2/car-dealer-api/internal/domains/notification"
	models "github.com/susek555/BD2/car-dealer-api/internal/models"
)

// NotificationServiceInterface is an autogenerated mock type for the NotificationServiceInterface type
type NotificationServiceInterface struct {
	mock.Mock
}

type NotificationServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationServiceInterface) EXPECT() *NotificationServiceInterface_Expecter {
	return &NotificationServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateBuyNotification provides a mock function with given fields: _a0, buyerID, offer
func (_m *NotificationServiceInterface) CreateBuyNotification(_a0 *models.Notification, buyerID string, offer *models.SaleOffer) error {
	ret := _m.Called(_a0, buyerID, offer)

	if len(ret) == 0 {
		panic("no return value specified for CreateBuyNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Notification, string, *models.SaleOffer) error); ok {
		r0 = rf(_a0, buyerID, offer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationServiceInterface_CreateBuyNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBuyNotification'
type NotificationServiceInterface_CreateBuyNotification_Call struct {
	*mock.Call
}

// CreateBuyNotification is a helper method to define mock.On call
//   - _a0 *models.Notification
//   - buyerID string
//   - offer *models.SaleOffer
func (_e *NotificationServiceInterface_Expecter) CreateBuyNotification(_a0 interface{}, buyerID interface{}, offer interface{}) *NotificationServiceInterface_CreateBuyNotification_Call {
	return &NotificationServiceInterface_CreateBuyNotification_Call{Call: _e.mock.On("CreateBuyNotification", _a0, buyerID, offer)}
}

func (_c *NotificationServiceInterface_CreateBuyNotification_Call) Run(run func(_a0 *models.Notification, buyerID string, offer *models.SaleOffer)) *NotificationServiceInterface_CreateBuyNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Notification), args[1].(string), args[2].(*models.SaleOffer))
	})
	return _c
}

func (_c *NotificationServiceInterface_CreateBuyNotification_Call) Return(_a0 error) *NotificationServiceInterface_CreateBuyNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationServiceInterface_CreateBuyNotification_Call) RunAndReturn(run func(*models.Notification, string, *models.SaleOffer) error) *NotificationServiceInterface_CreateBuyNotification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBuyNowNotification provides a mock function with given fields: _a0, buyerID, offer
func (_m *NotificationServiceInterface) CreateBuyNowNotification(_a0 *models.Notification, buyerID string, offer *models.Auction) error {
	ret := _m.Called(_a0, buyerID, offer)

	if len(ret) == 0 {
		panic("no return value specified for CreateBuyNowNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Notification, string, *models.Auction) error); ok {
		r0 = rf(_a0, buyerID, offer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationServiceInterface_CreateBuyNowNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBuyNowNotification'
type NotificationServiceInterface_CreateBuyNowNotification_Call struct {
	*mock.Call
}

// CreateBuyNowNotification is a helper method to define mock.On call
//   - _a0 *models.Notification
//   - buyerID string
//   - offer *models.Auction
func (_e *NotificationServiceInterface_Expecter) CreateBuyNowNotification(_a0 interface{}, buyerID interface{}, offer interface{}) *NotificationServiceInterface_CreateBuyNowNotification_Call {
	return &NotificationServiceInterface_CreateBuyNowNotification_Call{Call: _e.mock.On("CreateBuyNowNotification", _a0, buyerID, offer)}
}

func (_c *NotificationServiceInterface_CreateBuyNowNotification_Call) Run(run func(_a0 *models.Notification, buyerID string, offer *models.Auction)) *NotificationServiceInterface_CreateBuyNowNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Notification), args[1].(string), args[2].(*models.Auction))
	})
	return _c
}

func (_c *NotificationServiceInterface_CreateBuyNowNotification_Call) Return(_a0 error) *NotificationServiceInterface_CreateBuyNowNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationServiceInterface_CreateBuyNowNotification_Call) RunAndReturn(run func(*models.Notification, string, *models.Auction) error) *NotificationServiceInterface_CreateBuyNowNotification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEndAuctionNotification provides a mock function with given fields: _a0, winner, winningBid, offer
func (_m *NotificationServiceInterface) CreateEndAuctionNotification(_a0 *models.Notification, winner string, winningBid int64, offer *models.SaleOffer) error {
	ret := _m.Called(_a0, winner, winningBid, offer)

	if len(ret) == 0 {
		panic("no return value specified for CreateEndAuctionNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Notification, string, int64, *models.SaleOffer) error); ok {
		r0 = rf(_a0, winner, winningBid, offer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationServiceInterface_CreateEndAuctionNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEndAuctionNotification'
type NotificationServiceInterface_CreateEndAuctionNotification_Call struct {
	*mock.Call
}

// CreateEndAuctionNotification is a helper method to define mock.On call
//   - _a0 *models.Notification
//   - winner string
//   - winningBid int64
//   - offer *models.SaleOffer
func (_e *NotificationServiceInterface_Expecter) CreateEndAuctionNotification(_a0 interface{}, winner interface{}, winningBid interface{}, offer interface{}) *NotificationServiceInterface_CreateEndAuctionNotification_Call {
	return &NotificationServiceInterface_CreateEndAuctionNotification_Call{Call: _e.mock.On("CreateEndAuctionNotification", _a0, winner, winningBid, offer)}
}

func (_c *NotificationServiceInterface_CreateEndAuctionNotification_Call) Run(run func(_a0 *models.Notification, winner string, winningBid int64, offer *models.SaleOffer)) *NotificationServiceInterface_CreateEndAuctionNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Notification), args[1].(string), args[2].(int64), args[3].(*models.SaleOffer))
	})
	return _c
}

func (_c *NotificationServiceInterface_CreateEndAuctionNotification_Call) Return(_a0 error) *NotificationServiceInterface_CreateEndAuctionNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationServiceInterface_CreateEndAuctionNotification_Call) RunAndReturn(run func(*models.Notification, string, int64, *models.SaleOffer) error) *NotificationServiceInterface_CreateEndAuctionNotification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOutbidNotification provides a mock function with given fields: _a0, amount, offer
func (_m *NotificationServiceInterface) CreateOutbidNotification(_a0 *models.Notification, amount int64, offer *models.Auction) error {
	ret := _m.Called(_a0, amount, offer)

	if len(ret) == 0 {
		panic("no return value specified for CreateOutbidNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Notification, int64, *models.Auction) error); ok {
		r0 = rf(_a0, amount, offer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationServiceInterface_CreateOutbidNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOutbidNotification'
type NotificationServiceInterface_CreateOutbidNotification_Call struct {
	*mock.Call
}

// CreateOutbidNotification is a helper method to define mock.On call
//   - _a0 *models.Notification
//   - amount int64
//   - offer *models.Auction
func (_e *NotificationServiceInterface_Expecter) CreateOutbidNotification(_a0 interface{}, amount interface{}, offer interface{}) *NotificationServiceInterface_CreateOutbidNotification_Call {
	return &NotificationServiceInterface_CreateOutbidNotification_Call{Call: _e.mock.On("CreateOutbidNotification", _a0, amount, offer)}
}

func (_c *NotificationServiceInterface_CreateOutbidNotification_Call) Run(run func(_a0 *models.Notification, amount int64, offer *models.Auction)) *NotificationServiceInterface_CreateOutbidNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Notification), args[1].(int64), args[2].(*models.Auction))
	})
	return _c
}

func (_c *NotificationServiceInterface_CreateOutbidNotification_Call) Return(_a0 error) *NotificationServiceInterface_CreateOutbidNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationServiceInterface_CreateOutbidNotification_Call) RunAndReturn(run func(*models.Notification, int64, *models.Auction) error) *NotificationServiceInterface_CreateOutbidNotification_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilteredNotifications provides a mock function with given fields: filter
func (_m *NotificationServiceInterface) GetFilteredNotifications(filter *notification.NotificationFilter) (*notification.RetrieveNotificationsWithPagination, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteredNotifications")
	}

	var r0 *notification.RetrieveNotificationsWithPagination
	var r1 error
	if rf, ok := ret.Get(0).(func(*notification.NotificationFilter) (*notification.RetrieveNotificationsWithPagination, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*notification.NotificationFilter) *notification.RetrieveNotificationsWithPagination); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notification.RetrieveNotificationsWithPagination)
		}
	}

	if rf, ok := ret.Get(1).(func(*notification.NotificationFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServiceInterface_GetFilteredNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilteredNotifications'
type NotificationServiceInterface_GetFilteredNotifications_Call struct {
	*mock.Call
}

// GetFilteredNotifications is a helper method to define mock.On call
//   - filter *notification.NotificationFilter
func (_e *NotificationServiceInterface_Expecter) GetFilteredNotifications(filter interface{}) *NotificationServiceInterface_GetFilteredNotifications_Call {
	return &NotificationServiceInterface_GetFilteredNotifications_Call{Call: _e.mock.On("GetFilteredNotifications", filter)}
}

func (_c *NotificationServiceInterface_GetFilteredNotifications_Call) Run(run func(filter *notification.NotificationFilter)) *NotificationServiceInterface_GetFilteredNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*notification.NotificationFilter))
	})
	return _c
}

func (_c *NotificationServiceInterface_GetFilteredNotifications_Call) Return(_a0 *notification.RetrieveNotificationsWithPagination, _a1 error) *NotificationServiceInterface_GetFilteredNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServiceInterface_GetFilteredNotifications_Call) RunAndReturn(run func(*notification.NotificationFilter) (*notification.RetrieveNotificationsWithPagination, error)) *NotificationServiceInterface_GetFilteredNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationByID provides a mock function with given fields: id
func (_m *NotificationServiceInterface) GetNotificationByID(id uint) (*models.Notification, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationByID")
	}

	var r0 *models.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Notification, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Notification); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServiceInterface_GetNotificationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationByID'
type NotificationServiceInterface_GetNotificationByID_Call struct {
	*mock.Call
}

// GetNotificationByID is a helper method to define mock.On call
//   - id uint
func (_e *NotificationServiceInterface_Expecter) GetNotificationByID(id interface{}) *NotificationServiceInterface_GetNotificationByID_Call {
	return &NotificationServiceInterface_GetNotificationByID_Call{Call: _e.mock.On("GetNotificationByID", id)}
}

func (_c *NotificationServiceInterface_GetNotificationByID_Call) Run(run func(id uint)) *NotificationServiceInterface_GetNotificationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *NotificationServiceInterface_GetNotificationByID_Call) Return(_a0 *models.Notification, _a1 error) *NotificationServiceInterface_GetNotificationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServiceInterface_GetNotificationByID_Call) RunAndReturn(run func(uint) (*models.Notification, error)) *NotificationServiceInterface_GetNotificationByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSeenStatus provides a mock function with given fields: notificationID, userID, seen
func (_m *NotificationServiceInterface) UpdateSeenStatus(notificationID uint, userID uint, seen bool) error {
	ret := _m.Called(notificationID, userID, seen)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSeenStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, bool) error); ok {
		r0 = rf(notificationID, userID, seen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationServiceInterface_UpdateSeenStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSeenStatus'
type NotificationServiceInterface_UpdateSeenStatus_Call struct {
	*mock.Call
}

// UpdateSeenStatus is a helper method to define mock.On call
//   - notificationID uint
//   - userID uint
//   - seen bool
func (_e *NotificationServiceInterface_Expecter) UpdateSeenStatus(notificationID interface{}, userID interface{}, seen interface{}) *NotificationServiceInterface_UpdateSeenStatus_Call {
	return &NotificationServiceInterface_UpdateSeenStatus_Call{Call: _e.mock.On("UpdateSeenStatus", notificationID, userID, seen)}
}

func (_c *NotificationServiceInterface_UpdateSeenStatus_Call) Run(run func(notificationID uint, userID uint, seen bool)) *NotificationServiceInterface_UpdateSeenStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint), args[2].(bool))
	})
	return _c
}

func (_c *NotificationServiceInterface_UpdateSeenStatus_Call) Return(_a0 error) *NotificationServiceInterface_UpdateSeenStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationServiceInterface_UpdateSeenStatus_Call) RunAndReturn(run func(uint, uint, bool) error) *NotificationServiceInterface_UpdateSeenStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSeenStatusForAll provides a mock function with given fields: userID, seen
func (_m *NotificationServiceInterface) UpdateSeenStatusForAll(userID uint, seen bool) error {
	ret := _m.Called(userID, seen)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSeenStatusForAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, bool) error); ok {
		r0 = rf(userID, seen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationServiceInterface_UpdateSeenStatusForAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSeenStatusForAll'
type NotificationServiceInterface_UpdateSeenStatusForAll_Call struct {
	*mock.Call
}

// UpdateSeenStatusForAll is a helper method to define mock.On call
//   - userID uint
//   - seen bool
func (_e *NotificationServiceInterface_Expecter) UpdateSeenStatusForAll(userID interface{}, seen interface{}) *NotificationServiceInterface_UpdateSeenStatusForAll_Call {
	return &NotificationServiceInterface_UpdateSeenStatusForAll_Call{Call: _e.mock.On("UpdateSeenStatusForAll", userID, seen)}
}

func (_c *NotificationServiceInterface_UpdateSeenStatusForAll_Call) Run(run func(userID uint, seen bool)) *NotificationServiceInterface_UpdateSeenStatusForAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *NotificationServiceInterface_UpdateSeenStatusForAll_Call) Return(_a0 error) *NotificationServiceInterface_UpdateSeenStatusForAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationServiceInterface_UpdateSeenStatusForAll_Call) RunAndReturn(run func(uint, bool) error) *NotificationServiceInterface_UpdateSeenStatusForAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationServiceInterface creates a new instance of NotificationServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationServiceInterface {
	mock := &NotificationServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
