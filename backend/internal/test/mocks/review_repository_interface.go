// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	review "github.com/susek555/BD2/car-dealer-api/internal/domains/review"
)

// ReviewRepositoryInterface is an autogenerated mock type for the ReviewRepositoryInterface type
type ReviewRepositoryInterface struct {
	mock.Mock
}

type ReviewRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ReviewRepositoryInterface) EXPECT() *ReviewRepositoryInterface_Expecter {
	return &ReviewRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: entity
func (_m *ReviewRepositoryInterface) Create(entity *review.Review) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*review.Review) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReviewRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReviewRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - entity *review.Review
func (_e *ReviewRepositoryInterface_Expecter) Create(entity interface{}) *ReviewRepositoryInterface_Create_Call {
	return &ReviewRepositoryInterface_Create_Call{Call: _e.mock.On("Create", entity)}
}

func (_c *ReviewRepositoryInterface_Create_Call) Run(run func(entity *review.Review)) *ReviewRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*review.Review))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_Create_Call) Return(_a0 error) *ReviewRepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReviewRepositoryInterface_Create_Call) RunAndReturn(run func(*review.Review) error) *ReviewRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *ReviewRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReviewRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ReviewRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *ReviewRepositoryInterface_Expecter) Delete(id interface{}) *ReviewRepositoryInterface_Delete_Call {
	return &ReviewRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *ReviewRepositoryInterface_Delete_Call) Run(run func(id uint)) *ReviewRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_Delete_Call) Return(_a0 error) *ReviewRepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReviewRepositoryInterface_Delete_Call) RunAndReturn(run func(uint) error) *ReviewRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *ReviewRepositoryInterface) GetAll() ([]review.Review, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []review.Review
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]review.Review, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []review.Review); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]review.Review)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ReviewRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *ReviewRepositoryInterface_Expecter) GetAll() *ReviewRepositoryInterface_GetAll_Call {
	return &ReviewRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *ReviewRepositoryInterface_GetAll_Call) Run(run func()) *ReviewRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetAll_Call) Return(_a0 []review.Review, _a1 error) *ReviewRepositoryInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetAll_Call) RunAndReturn(run func() ([]review.Review, error)) *ReviewRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *ReviewRepositoryInterface) GetById(id uint) (review.Review, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 review.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (review.Review, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) review.Review); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(review.Review)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type ReviewRepositoryInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id uint
func (_e *ReviewRepositoryInterface_Expecter) GetById(id interface{}) *ReviewRepositoryInterface_GetById_Call {
	return &ReviewRepositoryInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *ReviewRepositoryInterface_GetById_Call) Run(run func(id uint)) *ReviewRepositoryInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetById_Call) Return(_a0 review.Review, _a1 error) *ReviewRepositoryInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetById_Call) RunAndReturn(run func(uint) (review.Review, error)) *ReviewRepositoryInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRevieweeId provides a mock function with given fields: reviewedId
func (_m *ReviewRepositoryInterface) GetByRevieweeId(reviewedId uint) ([]review.Review, error) {
	ret := _m.Called(reviewedId)

	if len(ret) == 0 {
		panic("no return value specified for GetByRevieweeId")
	}

	var r0 []review.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]review.Review, error)); ok {
		return rf(reviewedId)
	}
	if rf, ok := ret.Get(0).(func(uint) []review.Review); ok {
		r0 = rf(reviewedId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]review.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(reviewedId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetByRevieweeId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRevieweeId'
type ReviewRepositoryInterface_GetByRevieweeId_Call struct {
	*mock.Call
}

// GetByRevieweeId is a helper method to define mock.On call
//   - reviewedId uint
func (_e *ReviewRepositoryInterface_Expecter) GetByRevieweeId(reviewedId interface{}) *ReviewRepositoryInterface_GetByRevieweeId_Call {
	return &ReviewRepositoryInterface_GetByRevieweeId_Call{Call: _e.mock.On("GetByRevieweeId", reviewedId)}
}

func (_c *ReviewRepositoryInterface_GetByRevieweeId_Call) Run(run func(reviewedId uint)) *ReviewRepositoryInterface_GetByRevieweeId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetByRevieweeId_Call) Return(_a0 []review.Review, _a1 error) *ReviewRepositoryInterface_GetByRevieweeId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetByRevieweeId_Call) RunAndReturn(run func(uint) ([]review.Review, error)) *ReviewRepositoryInterface_GetByRevieweeId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByReviewerId provides a mock function with given fields: reviewerId
func (_m *ReviewRepositoryInterface) GetByReviewerId(reviewerId uint) ([]review.Review, error) {
	ret := _m.Called(reviewerId)

	if len(ret) == 0 {
		panic("no return value specified for GetByReviewerId")
	}

	var r0 []review.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]review.Review, error)); ok {
		return rf(reviewerId)
	}
	if rf, ok := ret.Get(0).(func(uint) []review.Review); ok {
		r0 = rf(reviewerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]review.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(reviewerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetByReviewerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByReviewerId'
type ReviewRepositoryInterface_GetByReviewerId_Call struct {
	*mock.Call
}

// GetByReviewerId is a helper method to define mock.On call
//   - reviewerId uint
func (_e *ReviewRepositoryInterface_Expecter) GetByReviewerId(reviewerId interface{}) *ReviewRepositoryInterface_GetByReviewerId_Call {
	return &ReviewRepositoryInterface_GetByReviewerId_Call{Call: _e.mock.On("GetByReviewerId", reviewerId)}
}

func (_c *ReviewRepositoryInterface_GetByReviewerId_Call) Run(run func(reviewerId uint)) *ReviewRepositoryInterface_GetByReviewerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerId_Call) Return(_a0 []review.Review, _a1 error) *ReviewRepositoryInterface_GetByReviewerId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerId_Call) RunAndReturn(run func(uint) ([]review.Review, error)) *ReviewRepositoryInterface_GetByReviewerId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByReviewerIdAndRevieweeId provides a mock function with given fields: reviewerId, reviewedId
func (_m *ReviewRepositoryInterface) GetByReviewerIdAndRevieweeId(reviewerId uint, reviewedId uint) (review.Review, error) {
	ret := _m.Called(reviewerId, reviewedId)

	if len(ret) == 0 {
		panic("no return value specified for GetByReviewerIdAndRevieweeId")
	}

	var r0 review.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (review.Review, error)); ok {
		return rf(reviewerId, reviewedId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) review.Review); ok {
		r0 = rf(reviewerId, reviewedId)
	} else {
		r0 = ret.Get(0).(review.Review)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(reviewerId, reviewedId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByReviewerIdAndRevieweeId'
type ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call struct {
	*mock.Call
}

// GetByReviewerIdAndRevieweeId is a helper method to define mock.On call
//   - reviewerId uint
//   - reviewedId uint
func (_e *ReviewRepositoryInterface_Expecter) GetByReviewerIdAndRevieweeId(reviewerId interface{}, reviewedId interface{}) *ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call {
	return &ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call{Call: _e.mock.On("GetByReviewerIdAndRevieweeId", reviewerId, reviewedId)}
}

func (_c *ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call) Run(run func(reviewerId uint, reviewedId uint)) *ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call) Return(_a0 review.Review, _a1 error) *ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call) RunAndReturn(run func(uint, uint) (review.Review, error)) *ReviewRepositoryInterface_GetByReviewerIdAndRevieweeId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: entity
func (_m *ReviewRepositoryInterface) Update(entity *review.Review) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*review.Review) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReviewRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ReviewRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - entity *review.Review
func (_e *ReviewRepositoryInterface_Expecter) Update(entity interface{}) *ReviewRepositoryInterface_Update_Call {
	return &ReviewRepositoryInterface_Update_Call{Call: _e.mock.On("Update", entity)}
}

func (_c *ReviewRepositoryInterface_Update_Call) Run(run func(entity *review.Review)) *ReviewRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*review.Review))
	})
	return _c
}

func (_c *ReviewRepositoryInterface_Update_Call) Return(_a0 error) *ReviewRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReviewRepositoryInterface_Update_Call) RunAndReturn(run func(*review.Review) error) *ReviewRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewReviewRepositoryInterface creates a new instance of ReviewRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewRepositoryInterface {
	mock := &ReviewRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
