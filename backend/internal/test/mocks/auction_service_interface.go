// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	auction "github.com/susek555/BD2/car-dealer-api/internal/domains/auction"

	models "github.com/susek555/BD2/car-dealer-api/internal/models"
)

// AuctionServiceInterface is an autogenerated mock type for the AuctionServiceInterface type
type AuctionServiceInterface struct {
	mock.Mock
}

type AuctionServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuctionServiceInterface) EXPECT() *AuctionServiceInterface_Expecter {
	return &AuctionServiceInterface_Expecter{mock: &_m.Mock}
}

// BuyNow provides a mock function with given fields: auctionID, userID
func (_m *AuctionServiceInterface) BuyNow(auctionID uint, userID uint) (*models.Auction, error) {
	ret := _m.Called(auctionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for BuyNow")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*models.Auction, error)); ok {
		return rf(auctionID, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *models.Auction); ok {
		r0 = rf(auctionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(auctionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuctionServiceInterface_BuyNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuyNow'
type AuctionServiceInterface_BuyNow_Call struct {
	*mock.Call
}

// BuyNow is a helper method to define mock.On call
//   - auctionID uint
//   - userID uint
func (_e *AuctionServiceInterface_Expecter) BuyNow(auctionID interface{}, userID interface{}) *AuctionServiceInterface_BuyNow_Call {
	return &AuctionServiceInterface_BuyNow_Call{Call: _e.mock.On("BuyNow", auctionID, userID)}
}

func (_c *AuctionServiceInterface_BuyNow_Call) Run(run func(auctionID uint, userID uint)) *AuctionServiceInterface_BuyNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *AuctionServiceInterface_BuyNow_Call) Return(_a0 *models.Auction, _a1 error) *AuctionServiceInterface_BuyNow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuctionServiceInterface_BuyNow_Call) RunAndReturn(run func(uint, uint) (*models.Auction, error)) *AuctionServiceInterface_BuyNow_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0
func (_m *AuctionServiceInterface) Create(_a0 *auction.CreateAuctionDTO) (*auction.RetrieveAuctionDTO, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *auction.RetrieveAuctionDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*auction.CreateAuctionDTO) (*auction.RetrieveAuctionDTO, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*auction.CreateAuctionDTO) *auction.RetrieveAuctionDTO); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auction.RetrieveAuctionDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*auction.CreateAuctionDTO) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuctionServiceInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuctionServiceInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *auction.CreateAuctionDTO
func (_e *AuctionServiceInterface_Expecter) Create(_a0 interface{}) *AuctionServiceInterface_Create_Call {
	return &AuctionServiceInterface_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *AuctionServiceInterface_Create_Call) Run(run func(_a0 *auction.CreateAuctionDTO)) *AuctionServiceInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*auction.CreateAuctionDTO))
	})
	return _c
}

func (_c *AuctionServiceInterface_Create_Call) Return(_a0 *auction.RetrieveAuctionDTO, _a1 error) *AuctionServiceInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuctionServiceInterface_Create_Call) RunAndReturn(run func(*auction.CreateAuctionDTO) (*auction.RetrieveAuctionDTO, error)) *AuctionServiceInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id, userID
func (_m *AuctionServiceInterface) Delete(id uint, userID uint) error {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuctionServiceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AuctionServiceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
//   - userID uint
func (_e *AuctionServiceInterface_Expecter) Delete(id interface{}, userID interface{}) *AuctionServiceInterface_Delete_Call {
	return &AuctionServiceInterface_Delete_Call{Call: _e.mock.On("Delete", id, userID)}
}

func (_c *AuctionServiceInterface_Delete_Call) Run(run func(id uint, userID uint)) *AuctionServiceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *AuctionServiceInterface_Delete_Call) Return(_a0 error) *AuctionServiceInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuctionServiceInterface_Delete_Call) RunAndReturn(run func(uint, uint) error) *AuctionServiceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id, userID
func (_m *AuctionServiceInterface) GetByID(id uint, userID *uint) (*auction.RetrieveAuctionDTO, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *auction.RetrieveAuctionDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *uint) (*auction.RetrieveAuctionDTO, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, *uint) *auction.RetrieveAuctionDTO); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auction.RetrieveAuctionDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuctionServiceInterface_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type AuctionServiceInterface_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint
//   - userID *uint
func (_e *AuctionServiceInterface_Expecter) GetByID(id interface{}, userID interface{}) *AuctionServiceInterface_GetByID_Call {
	return &AuctionServiceInterface_GetByID_Call{Call: _e.mock.On("GetByID", id, userID)}
}

func (_c *AuctionServiceInterface_GetByID_Call) Run(run func(id uint, userID *uint)) *AuctionServiceInterface_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(*uint))
	})
	return _c
}

func (_c *AuctionServiceInterface_GetByID_Call) Return(_a0 *auction.RetrieveAuctionDTO, _a1 error) *AuctionServiceInterface_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuctionServiceInterface_GetByID_Call) RunAndReturn(run func(uint, *uint) (*auction.RetrieveAuctionDTO, error)) *AuctionServiceInterface_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDNonDTO provides a mock function with given fields: id
func (_m *AuctionServiceInterface) GetByIDNonDTO(id uint) (*models.Auction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDNonDTO")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Auction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Auction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuctionServiceInterface_GetByIDNonDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDNonDTO'
type AuctionServiceInterface_GetByIDNonDTO_Call struct {
	*mock.Call
}

// GetByIDNonDTO is a helper method to define mock.On call
//   - id uint
func (_e *AuctionServiceInterface_Expecter) GetByIDNonDTO(id interface{}) *AuctionServiceInterface_GetByIDNonDTO_Call {
	return &AuctionServiceInterface_GetByIDNonDTO_Call{Call: _e.mock.On("GetByIDNonDTO", id)}
}

func (_c *AuctionServiceInterface_GetByIDNonDTO_Call) Run(run func(id uint)) *AuctionServiceInterface_GetByIDNonDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *AuctionServiceInterface_GetByIDNonDTO_Call) Return(_a0 *models.Auction, _a1 error) *AuctionServiceInterface_GetByIDNonDTO_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuctionServiceInterface_GetByIDNonDTO_Call) RunAndReturn(run func(uint) (*models.Auction, error)) *AuctionServiceInterface_GetByIDNonDTO_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, userID
func (_m *AuctionServiceInterface) Update(_a0 *auction.UpdateAuctionDTO, userID uint) (*auction.RetrieveAuctionDTO, error) {
	ret := _m.Called(_a0, userID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *auction.RetrieveAuctionDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*auction.UpdateAuctionDTO, uint) (*auction.RetrieveAuctionDTO, error)); ok {
		return rf(_a0, userID)
	}
	if rf, ok := ret.Get(0).(func(*auction.UpdateAuctionDTO, uint) *auction.RetrieveAuctionDTO); ok {
		r0 = rf(_a0, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auction.RetrieveAuctionDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*auction.UpdateAuctionDTO, uint) error); ok {
		r1 = rf(_a0, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuctionServiceInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AuctionServiceInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *auction.UpdateAuctionDTO
//   - userID uint
func (_e *AuctionServiceInterface_Expecter) Update(_a0 interface{}, userID interface{}) *AuctionServiceInterface_Update_Call {
	return &AuctionServiceInterface_Update_Call{Call: _e.mock.On("Update", _a0, userID)}
}

func (_c *AuctionServiceInterface_Update_Call) Run(run func(_a0 *auction.UpdateAuctionDTO, userID uint)) *AuctionServiceInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*auction.UpdateAuctionDTO), args[1].(uint))
	})
	return _c
}

func (_c *AuctionServiceInterface_Update_Call) Return(_a0 *auction.RetrieveAuctionDTO, _a1 error) *AuctionServiceInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuctionServiceInterface_Update_Call) RunAndReturn(run func(*auction.UpdateAuctionDTO, uint) (*auction.RetrieveAuctionDTO, error)) *AuctionServiceInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrice provides a mock function with given fields: auctionID, newPrice
func (_m *AuctionServiceInterface) UpdatePrice(auctionID uint, newPrice uint) error {
	ret := _m.Called(auctionID, newPrice)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(auctionID, newPrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuctionServiceInterface_UpdatePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrice'
type AuctionServiceInterface_UpdatePrice_Call struct {
	*mock.Call
}

// UpdatePrice is a helper method to define mock.On call
//   - auctionID uint
//   - newPrice uint
func (_e *AuctionServiceInterface_Expecter) UpdatePrice(auctionID interface{}, newPrice interface{}) *AuctionServiceInterface_UpdatePrice_Call {
	return &AuctionServiceInterface_UpdatePrice_Call{Call: _e.mock.On("UpdatePrice", auctionID, newPrice)}
}

func (_c *AuctionServiceInterface_UpdatePrice_Call) Run(run func(auctionID uint, newPrice uint)) *AuctionServiceInterface_UpdatePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *AuctionServiceInterface_UpdatePrice_Call) Return(_a0 error) *AuctionServiceInterface_UpdatePrice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuctionServiceInterface_UpdatePrice_Call) RunAndReturn(run func(uint, uint) error) *AuctionServiceInterface_UpdatePrice_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuctionServiceInterface creates a new instance of AuctionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuctionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuctionServiceInterface {
	mock := &AuctionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
